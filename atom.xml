<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>融点Sonic的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iamsonic.net/"/>
  <updated>2017-05-26T08:13:14.000Z</updated>
  <id>http://iamsonic.net/</id>
  
  <author>
    <name>Sonic</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iamsonic博客复活</title>
    <link href="http://iamsonic.net/2017/05/20/new-blog/"/>
    <id>http://iamsonic.net/2017/05/20/new-blog/</id>
    <published>2017-05-20T08:45:23.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sonic-Blog-Come-back"><a href="#Sonic-Blog-Come-back" class="headerlink" title="Sonic Blog Come back!"></a>Sonic Blog Come back!</h2><p>博客主机到期，域名到期一直没有鸟。<br>刚好去年在工作中研究了<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>搭建静态博客，机缘巧合又发现了好的博客主题<a href="https://github.com/AngryPowman/hexo-theme-prontera" target="_blank" rel="external">hexo-theme-prontera</a>。那就换吧，之前文章不多，全部转回MD格式，顺便把域名也从iamsonic.info 换成 iamsonic.net.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sonic-Blog-Come-back&quot;&gt;&lt;a href=&quot;#Sonic-Blog-Come-back&quot; class=&quot;headerlink&quot; title=&quot;Sonic Blog Come back!&quot;&gt;&lt;/a&gt;Sonic Blog Come back!&lt;/h2&gt;&lt;p&gt;博客主机到期，域名到期一直没有鸟。&lt;br&gt;刚好去年在工作中研究了&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;搭建静态博客，机缘巧合又发现了好的博客主题&lt;a href=&quot;https://github.com/AngryPowman/hexo-theme-prontera&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-prontera&lt;/a&gt;。那就换吧，之前文章不多，全部转回MD格式，顺便把域名也从iamsonic.info 换成 iamsonic.net.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个互联网从业者的自我修炼</title>
    <link href="http://iamsonic.net/2017/03/07/internet-man-practice/"/>
    <id>http://iamsonic.net/2017/03/07/internet-man-practice/</id>
    <published>2017-03-07T10:57:59.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>“谨以此文，献给即将踏入35岁的自己，互联网从业12年之际。”</strong></p>
</blockquote>
<p>2004年毕业开始工作，2005年开始踏足互联网行业，从业12年间，做过平面设计、网页设计、设计管理、后台开发、前端开发、客串过产品经理、项目管理。一路走到今天，感慨互联网变化飞快，专业技能的升级更新是永无止境的。不同的职位，所需要的技能及关注点是不一样的，唯独一些通用的能力，是值得我们不断修炼，并且在互联网任何岗位，都能派上用场。结合从业多年的摸索及经验总结，略做整理，希望对选择并初入互联网行业的新人们有所帮助。分为几块：</p>
<h4 id="·-项目管理"><a href="#·-项目管理" class="headerlink" title="· 项目管理"></a>· 项目管理</h4><h4 id="·-时间管理"><a href="#·-时间管理" class="headerlink" title="· 时间管理"></a>· 时间管理</h4><h4 id="·-自我管理"><a href="#·-自我管理" class="headerlink" title="· 自我管理"></a>· 自我管理</h4><h2 id="【项目管理】"><a href="#【项目管理】" class="headerlink" title="【项目管理】"></a><strong>【项目管理】</strong></h2><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p1-1.png" alt=""></p>
<h3 id="1-带项目前先把需求做好"><a href="#1-带项目前先把需求做好" class="headerlink" title="1. 带项目前先把需求做好"></a><strong>1. 带项目前先把需求做好</strong></h3><p>所有的Leader都不可能放心地把项目交给一个连日常需求都做不好的下属。先问问自己，日常的需求除了『按时』『保质』这个基本点外，还有没有考虑到方便维护，方便别人接手，你产出的文档和代码，是大多数人都能轻易读懂理解，还是只有你一个人看得懂？有没有做出一些优化？从而为团队提升效率。有没有做出创新，能为团队或需求方带来价值。再然后，你的经验有没有沉淀下来，传承并帮忙你身边的同事。如果自己对待每个需求，都可以按照高于需求方预期来要求自己，并且拿出相对应的成果。不用多久。相信即使你不主动向Leader要项目，Ta都会把手头一些重要的项目交给你来带。</p>
<p>当然日常的做需求和带项目，带给你的收获是不一样的，建议平衡好各自的精力划分比重。</p>
<p><strong>· 需求做好了，</strong>可以让你在业务团队有更多的认同感，从而获得更多的业务归宿感</p>
<p><strong>· 项目带好了，</strong>可以让你在项目里获得能力的提升，从而也提高你在团队里的影响力</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p1-2.png" alt=""></p>
<p><strong>2. 管理好干系人</strong></p>
<p>工作中除了对事情的关注外，还要更多地关注人。一个项目的管理者，最基本的素质是识别出项目的干系人，并对干系人的兴趣及影响进行分析，理解并管理好他们的产出或预期。对于互联网的项目，简单地把干系人划分为如下几种：</p>
<h4 id="发起人"><a href="#发起人" class="headerlink" title="发起人"></a>发起人</h4><p>项目的发起人（Sponsor）,一般是你的Leader或Boss，Ta们一般可以帮忙你获得资源的协助，对待Ta们，要<strong>主动</strong>点把项目进展和目前的问题及时汇报。</p>
<h4 id="项目核心成员"><a href="#项目核心成员" class="headerlink" title="项目核心成员"></a>项目核心成员</h4><p>所有直接参与到项目中执行的人员，对待Ta们，要走心<strong>坦诚</strong>，不要有任何欺骗。</p>
<h4 id="客户（用户）"><a href="#客户（用户）" class="headerlink" title="客户（用户）"></a>客户（用户）</h4><p>项目最终会使用的客户（用户），做生意待客户讲求<strong>诚信</strong>，做项目同样，欺骗只会透支客户（用户）对你的信任。</p>
<h4 id="供应商（CP）"><a href="#供应商（CP）" class="headerlink" title="供应商（CP）"></a>供应商（CP）</h4><p>供应商（CP）可以帮助项目节省人力和时间，选择一家合作默契<strong>懂我</strong>的供应商非常重要，人中可节省大量沟通成本。</p>
<h4 id="项目非核心成员"><a href="#项目非核心成员" class="headerlink" title="项目非核心成员"></a>项目非核心成员</h4><p>一般是核心成员的相关Leader或兄弟部门的其它同事，但要提防他们的举动会对项目有不好的影响，<strong>别来闹</strong>，比如：支持成员人力抽离，不靠谱的项目参一脚。</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p1-3.png" alt=""></p>
<h3 id="3-为什么要开例会？"><a href="#3-为什么要开例会？" class="headerlink" title="3. 为什么要开例会？"></a><strong>3. 为什么要开例会？</strong></h3><p>在管理项目时，定期要同步最新情况给所有成员，回顾工作成果及明确目标计划。但这一切都是对事物的关注，还要多加深对人的关注。在我做为项目成员开例会时，印象最深刻的是PM一开会并没有直接进入主题，而是先关心一下生活近况，然后准确地指出成员在某工作模块上的成果对项目带来了什么贡献，让Ta感受到这个贡献为客户（用户）带来了什么便利，从而获得项目成就感和团队归属感。其实，例会还承载着一个项目成员联络感情的重要作用。我所理解的例会需要如下的使命：</p>
<p><strong>· 项目成员联络感情</strong></p>
<p><strong>· 成员激励及建议</strong></p>
<p><strong>· 同步最新项目情况</strong></p>
<p><strong>· 明确目标及计划</strong></p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p1-4.png" alt=""></p>
<h3 id="4-事情搞砸了怎么办？"><a href="#4-事情搞砸了怎么办？" class="headerlink" title="4. 事情搞砸了怎么办？"></a><strong>4. 事情搞砸了怎么办？</strong></h3><p>项目做砸了很正常，很多事情并不是单靠努力就能做好，即使有靠谱的项目和团队的前提下，还要得到上级的肯定，客户的支持认可等等。所以在一开始的时候多考虑客观因素，做好最坏的打算。清楚最好的情况是怎样，最差的情况是怎样，是否能接受。并且提前制订好所有潜在风险的解决方案。当问题真的出现时，你可以淡定的应对，避免把事情搞砸。最后项目做好了还是做砸了，都要好好总结思考，给项目所有人一个交待。</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p1-5.png" alt=""></p>
<h2 id="【时间管理】"><a href="#【时间管理】" class="headerlink" title="【时间管理】"></a><strong>【时间管理】</strong></h2><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p2-1.png" alt=""></p>
<blockquote>
<p>爱因斯坦说过，『人与人的差距在于业余时间』</p>
</blockquote>
<p>我们假设是8小时工作，8小时睡觉，8小时业余时间。在不压缩睡眠及工作时间的前提下，拼的就是业余时间的利用，我们要保护好这个时间块，因为生活中有大量的琐碎事，会侵袭它。当然，下面列举的点，有一些占用了业余时间，但也许会让你有另外的收获。比如你去参加一个可去可不去的饭局，但局上你收获一个志同道合的朋友或者未来的配偶，看你如何去平衡。</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p2-2.png" alt=""></p>
<h3 id="1-工作中如何处理被干扰？"><a href="#1-工作中如何处理被干扰？" class="headerlink" title="1. 工作中如何处理被干扰？"></a><strong>1. 工作中如何处理被干扰？</strong></h3><p>业余时间不想被『加班』侵袭，离不开每天高效率、高质量的工作。你可以通过压缩睡眠时间来为工作争取更多的时间，但这并不是一个好的方法。睡眠的压缩意味着个人健康、工作质量的透支。工作效率要提交，首先要学会如些处理各种干扰：</p>
<h4 id="IM工具（微信、QQ）"><a href="#IM工具（微信、QQ）" class="headerlink" title="IM工具（微信、QQ）"></a>IM工具（微信、QQ）</h4><p>很多有强迫症的同学，每隔一段时间就会检查一下新消息，生怕有同事或家人有事找。但其实真的有急事，找不到人都会打手机，只要确保手机没有欠费停机，所以工作时，建议IM工具关闭或关闭新消息推送。</p>
<h4 id="RTX"><a href="#RTX" class="headerlink" title="RTX"></a>RTX</h4><p>工作沟通工具是不能关闭的，在集中精神工作时，这方面的干扰确实存在。之前的做法是每30分钟定期关注一下，但发现这种办法虽然能统一处理RTX，高效沟通，但局限是重要信息回复太慢。关键信息的获取太滞后了。比如有些同事今天请吃下午茶，在群里喊了一句，能不能吃到全看你信息的掌握速度。这里有两个小技巧分享：</p>
<h4 id="1-RTX功能『关注消息』"><a href="#1-RTX功能『关注消息』" class="headerlink" title="1). RTX功能『关注消息』"></a><strong>1). RTX功能『关注消息』</strong></h4><p>你可以设置一些你比较关心的事情的关键词，当这种关键词出现时，你能第一时间收到，并且以@你的方式在任务栏闪动。可以不只是吃的话题…</p>
<h4 id="2-重要人物加『标签』"><a href="#2-重要人物加『标签』" class="headerlink" title="**2).重要人物加『标签』**"></a><strong>**2).</strong>重要人物加『标签』**</h4><p>把一些你要重点关注的人物，比如各大Boss拉到一个 Boss的标签里，标签里面Boss发给你的信息，会单独在另一个任务栏的窗口中提示信息，重要人物信息就不会漏。</p>
<h3 id="座机"><a href="#座机" class="headerlink" title="座机"></a>座机</h3><p>RTX找了没回复，通常都会打座机，但有时忙起来或代码写得正High，座机铃声确实挺烦人，出于礼貌尊重又不得不接。于是久而久之就出现RTX只要回复慢，对方必打座机，因为对方知道只要打电话就能找到，不管你目前手头是否紧急事情在处理。相信有不少同学有这样的困惑。我后来的做法是，把座机的铃声调整到最低，减轻电话铃声对人的干扰，如果不忙可以马上接，如果正集中精神做事情，暂时不接。忙完后再回拨。这个回拨非常重要，可以中和掉对方心里的不愉快，让对方知道，并不是故意不理会，确实是当时太忙处理不了。很简单的道理，但能做到回拨的人却不多。</p>
<h3 id="当面骚扰"><a href="#当面骚扰" class="headerlink" title="当面骚扰"></a>当面骚扰</h3><p>有时候，对方会直接到你座位打断你，直接当面骚扰，据我所知，这通常有几种可能：</p>
<p><strong>· 确实有重要的事情</strong>，要得到你马上的回复，这情况没办法，你必须停下来马上做出回应。</p>
<p><strong>· 对方性格急</strong>，RTX找你没有及时回复，见你在工位上，就直接冲过来。通常出于礼貌，需要先听下对方的诉求，然后判断是否非常重要紧急的事情，确定是否要当时马上处理，如果不是，可以跟对方说目前手头正要非常重要紧急的事情在处理，等这会忙完了，再回头找Ta。</p>
<p><strong>· 新人介绍</strong>，这种情况建议马上停下来，这是你给对方的第一印象，站起来微笑回应并认真听从新人的导师介绍，最好也介绍一下自己。因为你以前新人在做介绍的时候，也希望同事能热情地回应你。</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p2-3.png" alt=""></p>
<h3 id="2-错峰出行，上班与排队"><a href="#2-错峰出行，上班与排队" class="headerlink" title="2. 错峰出行，上班与排队"></a><strong>2. 错峰出行，上班与排队</strong></h3><p>有娃的同学应该都知道，特别是娃小的时侯，业余时间是完完全全地被占用了，连看场电影都是一件极其奢侈的事情。为了争取多一点属于自己的业余时间，只能把时间抠到底。把所有最容易浪费掉的时间全部省回来：</p>
<h4 id="减少上下班途中时间"><a href="#减少上下班途中时间" class="headerlink" title="减少上下班途中时间"></a>减少上下班途中时间</h4><p>有同学上下班要花费3个小时，一天下来就只剩下21小时，虽然路上可以用来阅读或睡眠，但这3个小时能做的事情是比较固定的。上班地点离家近是优势，能帮你节省很多时间。</p>
<h4 id="减少排队等电梯、排队吃饭"><a href="#减少排队等电梯、排队吃饭" class="headerlink" title="减少排队等电梯、排队吃饭"></a>减少排队等电梯、排队吃饭</h4><p>错开上下班高峰点，还有饭点高峰期，可以减少很多排队的时间。</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p2-4.png" alt=""></p>
<h3 id="3-给你的TodoList-加个番茄钟"><a href="#3-给你的TodoList-加个番茄钟" class="headerlink" title="3.给你的TodoList 加个番茄钟"></a><strong>3.给你的TodoList 加个番茄钟</strong></h3><p>工作几年后，我一直都有每天给自己列TodoList的习惯，但是实践了一段时间，发现有一些问题：</p>
<p>· 清单上的事情<strong>没有一个时长的预估</strong>，这会导致列表的分配不够合理。</p>
<p>· 清单上的事情<strong>没有细化开始时间</strong>，是上午开展还是下午开展，还是晚上开展，没有定位好。</p>
<p>· <strong>没有定期去回顾总结</strong>阶段性的完成情况<br>后来研究了番茄工作法，感觉可以加入番茄钟的元素进行优化，把原来的TodoList进行优化改造：</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p2-5.png" alt=""></p>
<h4 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a><strong>优化前</strong></h4><hr>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p2-6.png" alt=""></p>
<h4 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h4><hr>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p2-7.png" alt=""></p>
<p>上面提到的前两个问题，任务时长预估，任务开始时间分配倒是解决了，后来经过一段时间的实践，发现一天根本就没办法完成那么多个番茄钟。每天我们有8个小时工作，理论上来讲是有16个番茄钟（25分钟/个），曾经给自己画了一个『理想的一天』蓝图如下：</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p2-8.png" alt=""></p>
<p>执行起来都是泪，经过一段时间的实践平均每天只能完成<strong>6-10个番茄钟</strong>，能完成12个就算是非常了不起了。最少的时侯，一天只完成2个番茄钟，满满的挫败感。后来经过分析和研究，发现这种情况很真正常。原因如下：</p>
<h4 id="1-变化总比计划快"><a href="#1-变化总比计划快" class="headerlink" title="1). 变化总比计划快"></a>1). 变化总比计划快</h4><p>计划做得再好，也算不出一些突发的情况，总有一些临时的会议，或临时支援等事情发现…</p>
<h4 id="2-专注太长，会透支当天的精力"><a href="#2-专注太长，会透支当天的精力" class="headerlink" title="2). 专注太长，会透支当天的精力"></a>2). 专注太长，会透支当天的精力</h4><p>有时专注于写文档或写代码很High时，一个番茄钟到了都不想停下来，结果连续好几个番茄钟没休息，但后面一停下来，感觉精力透支，不愿开始新的番茄钟…</p>
<h4 id="3-完成一件重要任务后会感动很久"><a href="#3-完成一件重要任务后会感动很久" class="headerlink" title="3). 完成一件重要任务后会感动很久"></a>3). 完成一件重要任务后会感动很久</h4><p>当这件重要任务完成后，自己会很感动很放松，惰性心理想让自己在这一刻想多停留一会…</p>
<p>除了第1种情况外，第2第3种是可以通过调整任务优先和严格执行番茄钟的停顿来解决，但是，最主要还是端正好心态。</p>
<blockquote>
<p>不要以当天完成了多少个番茄钟来衡量当天的工作产出和工作质量。这种工作方式最大的意义是让自己集中精力，专注做好当下的事情。</p>
</blockquote>
<h2 id="【自我管理】"><a href="#【自我管理】" class="headerlink" title="【自我管理】"></a><strong>【自我管理】</strong></h2><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p3-1.png" alt=""></p>
<h3 id="1-提升自我能力"><a href="#1-提升自我能力" class="headerlink" title="1.提升自我能力"></a><strong>1.提升自我能力</strong></h3><p>自我能力的提升，大家能马上想到的应该是专业技能。但在不同岗位，特别是跨越通道时，专业技能无法完全通用，比如设计师的手绘能力跟开发人员的编程能力。有没有一些非常实用，又是完全适用的通用技能？答案是肯定的，这里分享几个：</p>
<h4 id="换位思考"><a href="#换位思考" class="headerlink" title="换位思考"></a>换位思考</h4><p>站在对方的角度来思考问题，能让你理清很多原本不理解的事情，这个应用在沟通上，对方向你提出疑问，你在回答他之前，如果有先想一下他为什么这么说，通常能回答对方想要的答案。案例分享：</p>
<blockquote>
<p>【案例】小S去电器店买一款液晶电视，在谈价钱时，销售人员一再表示目前给到的已经是最低价，但小S觉得价格应该还可以再低点，于是就问：“很快就要双11了，双11你们店有活动么？”如果你是这位销售，你会怎么回答他的这个问题。初级的销售会说：“双11呀，商场会有活动，大部分商口都有特价”资深的销售会说，“你现在买的价，如果双11价格比这个低，直接过来退差价”。小S的提问，表面的需求是询问双11有没有活动，实际上的需求是，怀疑目前的价格是否最低价，显然资深销售的回答才是小S想要的答案。</p>
</blockquote>
<h4 id="主动交流"><a href="#主动交流" class="headerlink" title="主动交流"></a>主动交流</h4><p>性格外向的人，人缘往往比内向的人要好很多。他们在与陌生人交往时，通常能率先打破沉默，获得大家的关注，并在最短时间内展示自我让别人记住。当然主动交流的好处还不只于此，你甚至可以获得一些别人没有的权益。案例分享：</p>
<blockquote>
<p>【案例】小A所读的大学晚上11点宿舍关门，有时侯出去玩回来晚了非常不方便，小A为人外向，平时除了上课，还经常跟宿舍楼的保安聊天，有时跟保安一起下棋喝酒聊家常，过年回家上来带特产还给保安带了一份。保安知道他晚上经常出去玩很晚回来，于是跟他说，如果回来晚关门了，打个电话给我，即使不是我值班，也可以帮你开门。而大多学生回来晚时，往往要吃闭门羹的。</p>
<p>【案例】小C没有女朋友，有一次搭地铁外出时，在地铁上遇见一个女生小P外型与五观都是自己的菜，小C心想，如果我可以认识这个女生该有多好，要不要上去认识下要个微信呢？正在犹豫的时侯，地铁到站，而这位小P也刚好出站了。小C想都没想就跟冲了出去，上前跟小P表明刚才是同班地铁的，觉得女生很有气质，很想认识她，虽然他要在下一个站才到，但脑袋一热就冲上来了，想认识这位她，希望可以加个微信。小P犹豫了一下，最后还是给小C的勇气打动，双方互加微信后，过了几个月，小C和小P成为情侣。而大多数人，并不敢主动上去交流，害怕对方不鸟你，最终犹豫太久地铁门关上，邂逅的机会也就丢失…..</p>
</blockquote>
<h4 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h4><p>工作能力强，但是缺乏思考总结，会很容易陷入瓶颈，变得优秀而无用。反之，能力支撑不了野心，就变成眼高而手低。雷帮主说过“不要用战术上的勤奋来掩盖战略上的懒惰！”说的就是前者。身边看到有很多能力很强，或者说特别努力的人，他们都不缺少勤奋，但是并没有想明白为了什么而努力。有时侯在一些关键点上并没有想清楚，就让自己快速投身到具体细节的执行上，让自己变得忙碌起来，而这种忙碌是为了掩盖自我反思上的匮乏，让自己感动，让身边的人觉得很努力，这是一种恶性循环。</p>
<p>最近很火的一篇文章《我那么努力！有两套房，却不得不离职，到底哪里出了问题》，就是一个非常好的反面教材。陷入瓶颈期，又没有深入反思自我，打开局面。工作上一直停留在某一个层面上没有突破，生活上也没有找到更好的投资，增加自己的被动收入，个人品牌也没有塑造好，最后的结果是可悲的…</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p3-2.png" alt=""></p>
<h3 id="2-自制力"><a href="#2-自制力" class="headerlink" title="2.自制力"></a><strong>2.自制力</strong></h3><blockquote>
<p>当有一天，你无法忍受镜子中身体走样，肥胖不不堪时的你，你才意识到要减肥了….</p>
<p>当你经常熬夜，发现眼袋、黑眼圈越来越加重，你才想到自己睡眠不好…..</p>
<p>当你经常吃不对时，睡不对点，发现身体状况大不如前了，才想到之前所有的不克制，终究要开始用健康来偿还了…..</p>
</blockquote>
<p>为什么不能在无法忍受的状况到来之前，提前做些改变来应对呢，你可以先从一些小计划开始，并且马上去做。比方说：</p>
<h4 id="对于体型"><a href="#对于体型" class="headerlink" title="对于体型"></a>对于体型</h4><p>每天睡前做2分钟的平板支撑，每次增加10秒。好的体型能让你更加自信。</p>
<h4 id="对于睡眠"><a href="#对于睡眠" class="headerlink" title="对于睡眠"></a>对于睡眠</h4><p>今天开始，提前30分钟放下手机，上床睡觉，每次提前5分钟。好的睡眠能让你思路清晰。</p>
<h4 id="对于健康"><a href="#对于健康" class="headerlink" title="对于健康"></a>对于健康</h4><p>准时吃睡，控制好情绪。好的健康，可以在你理想人生的道路上继续前进。</p>
<p>这些都是非常简单可行的小目标，只要你能<strong>坚持执行</strong>一段时间，你会发现，自己也可以做7-8分钟的平板支撑，并在晚上11点前就入睡，饮食合理，克制欲望、控制情绪。整个人的精神状态好上很多倍，每天都过得非常充实。而这些收获，只需要你从现在开始执行，并坚持下去。</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p3-3.png" alt=""></p>
<h3 id="3-角色管理"><a href="#3-角色管理" class="headerlink" title="3.角色管理"></a><strong>3.角色管理</strong></h3><p>工作一段时间后，你的角色会不断发生变化，你不再只是负责一线业务的员工，可能你是业务的资深骨干或者团队的Leader，要为团队发展承担更多的责任。你不再是单身狗，可能你结婚生子，要为家庭美满及子女的成长教育考虑，尽家长的责任。你的父母慢慢变老，老人家的晚年需要你更多的关心和照顾。</p>
<p>至少有以下三种角色需要你扮演好：</p>
<h3 id="家庭角色"><a href="#家庭角色" class="headerlink" title="家庭角色"></a>家庭角色</h3><p><strong>情侣/配偶
</strong>两个人能长远的在一起，能尽情的<strong>沟通</strong>倾述很重要，家庭、工作、生活中总会有开心和不开心的时侯。开心的时侯有个人可以分享当下的喜悦，不开心时，可以听你的牢骚，并开导你，一起排忧解难。</p>
<p><strong>父母</strong><br>当我们为人父母对待好自己的子女时，提供给他们最好的<strong>教育</strong>，给予他们适当的<strong>关爱</strong>，但不是溺爱，尽我们所能抚养子女长大成人。</p>
<p><strong>子女</strong><br>做为儿女对待自己的父母，除了<strong>孝顺</strong>父母，还要多多<strong>关心</strong>父母的近况和健康，毕竟当我们成家立业后，父母的年龄越来越大。</p>
<h3 id="工作角色"><a href="#工作角色" class="headerlink" title="工作角色"></a>工作角色</h3><p><strong>职员
</strong>做为公司的职员，我们首先是符合公司的价值观的，在这个基础上，通过自己的努力，为公司创造价值，并且与同事之间保持平等互助的合作。</p>
<p><strong>下属</strong><br>做为下属，如果具备到积极<strong>进取</strong>的精神，并且在工作上能推动<strong>创新</strong>，相信没有上司不喜欢。</p>
<p><strong>上司</strong><br>做为上司，不断提升自己，才能<strong>帮助</strong>大家进步成长，做一个有<strong>担当</strong>的领导，兄弟们跟你混，就要让大家都有肉吃。</p>
<h3 id="生活角色"><a href="#生活角色" class="headerlink" title="生活角色"></a>生活角色</h3><p><strong>朋友</strong><br>朋友不用很多，<strong>真诚</strong>对待彼此，在好的时侯，不好的时侯能够<strong>相互帮助</strong>才最重要。</p>
<p><strong>学生</strong><br>做为学生，最起码的<strong>尊敬</strong>师长，并且勤奋<strong>好学</strong>地对待知识。</p>
<p><strong>长辈</strong><br>做为长辈，首先要树立<strong>榜样</strong>，不吝啬地把自己的学识<strong>传授</strong>给晚辈们。</p>
<blockquote>
<p>随着时间的推移，你发现你身上的角色越来越多，有些角色是会相互冲突的，这需要你平衡各个角色间的比重。</p>
</blockquote>
<p>这里分享两个案例：</p>
<h4 id="工作与家庭冲突"><a href="#工作与家庭冲突" class="headerlink" title="工作与家庭冲突"></a>工作与家庭冲突</h4><p>最典型的情况就是经常加班，疏远了家庭成员，最后家人埋怨你加班没有时间陪他们，甚至经常吵架等不愉快的事情。对待这种情况，首先是让家人理解你的工作。现在很多公司有『家属开放日』，对于家人理解和认可工作非常有效果。其次是在工作很忙，晚上或周有空了多陪陪家人，少玩手机。工作空闲的时侯跟家人聊聊天，并不一定要聊得深入，起码别让家人感受到整整一天都好像消失了一样。</p>
<h4 id="家庭之间冲突"><a href="#家庭之间冲突" class="headerlink" title="家庭之间冲突"></a>家庭之间冲突</h4><p>结婚生子后，你有自己的家庭，在这个家庭里，你是家长。但在另外两个家庭里，你依然是儿女。依然要孝顺并关爱自己的父母。所以在这三个家庭中，要平衡好付出，互相尊重每个家庭的差异，并彼此支持。</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p3-4.png" alt=""></p>
<p>记得在2008年，第一次接受管理培训的时侯，培训老师的一句话，对我印象深刻，记忆犹新。</p>
<blockquote>
<p>我们不是明星，无法引领时尚，但我们可以努力让自己成是人才，并选择自己的人生！”</p>
</blockquote>
<p>正春华枝俏，待秋实果茂，与君共勉!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“谨以此文，献给即将踏入35岁的自己，互联网从业12年之际。”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2004年毕业开始工作，2005年开始踏足互联网行业，从业12年间，做过平面设计、网页设计、设计管理、后台开发、前端开发、客串过产品经理、项目管理。一路走到今天，感慨互联网变化飞快，专业技能的升级更新是永无止境的。不同的职位，所需要的技能及关注点是不一样的，唯独一些通用的能力，是值得我们不断修炼，并且在互联网任何岗位，都能派上用场。结合从业多年的摸索及经验总结，略做整理，希望对选择并初入互联网行业的新人们有所帮助。分为几块：&lt;/p&gt;
&lt;h4 id=&quot;·-项目管理&quot;&gt;&lt;a href=&quot;#·-项目管理&quot; class=&quot;headerlink&quot; title=&quot;· 项目管理&quot;&gt;&lt;/a&gt;· 项目管理&lt;/h4&gt;&lt;h4 id=&quot;·-时间管理&quot;&gt;&lt;a href=&quot;#·-时间管理&quot; class=&quot;headerlink&quot; title=&quot;· 时间管理&quot;&gt;&lt;/a&gt;· 时间管理&lt;/h4&gt;&lt;h4 id=&quot;·-自我管理&quot;&gt;&lt;a href=&quot;#·-自我管理&quot; class=&quot;headerlink&quot; title=&quot;· 自我管理&quot;&gt;&lt;/a&gt;· 自我管理&lt;/h4&gt;&lt;h2 id=&quot;【项目管理】&quot;&gt;&lt;a href=&quot;#【项目管理】&quot; class=&quot;headerlink&quot; title=&quot;【项目管理】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【项目管理】&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/internet-man/p1-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-带项目前先把需求做好&quot;&gt;&lt;a href=&quot;#1-带项目前先把需求做好&quot; class=&quot;headerlink&quot; title=&quot;1. 带项目前先把需求做好&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 带项目前先把需求做好&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;所有的Leader都不可能放心地把项目交给一个连日常需求都做不好的下属。先问问自己，日常的需求除了『按时』『保质』这个基本点外，还有没有考虑到方便维护，方便别人接手，你产出的文档和代码，是大多数人都能轻易读懂理解，还是只有你一个人看得懂？有没有做出一些优化？从而为团队提升效率。有没有做出创新，能为团队或需求方带来价值。再然后，你的经验有没有沉淀下来，传承并帮忙你身边的同事。如果自己对待每个需求，都可以按照高于需求方预期来要求自己，并且拿出相对应的成果。不用多久。相信即使你不主动向Leader要项目，Ta都会把手头一些重要的项目交给你来带。&lt;/p&gt;
&lt;p&gt;当然日常的做需求和带项目，带给你的收获是不一样的，建议平衡好各自的精力划分比重。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gulp4.0 变化初探</title>
    <link href="http://iamsonic.net/2016/03/10/new-gulp4/"/>
    <id>http://iamsonic.net/2016/03/10/new-gulp4/</id>
    <published>2016-03-10T06:25:11.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/gulp4.0-2x.png" alt=""><br>gulp4.0开发1年多了，但是一直没有做为最新的稳定版本对外发布，最近才得知，真是孤陋寡闻一回。初探了一下，发现任务系统的变化蛮大，而且不再兼容3.x 及之前版本的任务系统。个人感受最深的是增加了 <code>gulp.series()</code> 和 <code>gulp.parallel()</code> 方法用于组合任务，多个任务执行时，<strong>可控制任务是异步（并行）或同步（串行），甚至是部分异步，部分同步。</strong></p>
<p>##全新的 gulp.task()<br>从 3.x 升级到 4.x 主要做的就是修改任务定义，以前的任务是这么写的：<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code1.png" alt=""></p>
<p>这样的任务写法在 Gulp 4.0 下要进行修改，要改成这样：<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code2.png" alt=""></p>
<p>对比一下代码，这里有两点要强调说明一下：</p>
<ul>
<li>为什么多了个<code>return</code>，是因为目前的任务组合可同步，也可异步，所以整个任务定义函数要做为一个返回值来设定，<a href="https://github.com/gulpjs/gulp/blob/4.0/docs/API.md#async-support" title="详细请看文档" target="_blank" rel="external">详细请看文档</a></li>
<li><code>gulp.series()</code>里的任务是同步执行的，<code>gulp.parallel()</code>里的任务是异步执行的</li>
</ul>
<blockquote>
<p><strong>所以之前3.x的<code>gulpfile.js</code> 切换到4.0版本是要修改一下的，否则执行时会报错。</strong></p>
</blockquote>
<p>新的gulp.task 返回接受两种新的方式  <code>Return a child process</code>     <code>Return a RxJS observable</code>  这非常方便插件开发者进行 gulp插件定制。<br><strong>Return a child process</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> spawn(<span class="string">'rm'</span>, [<span class="string">'-rf'</span>, path.join(__dirname, <span class="string">'build'</span>)]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>Return a RxJS observable</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Observable = <span class="built_in">require</span>(<span class="string">'rx'</span>).Observable;</div><div class="line"></div><div class="line">gulp.task(<span class="string">'sometask'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> Observable.return(<span class="number">42</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>##gulp同步执行任务<br>4.0之前 gulpr任务的执行都是异步的，但总有些场景是需要并行的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">"build"</span>, [<span class="string">"clean"</span>, <span class="string">"js-min"</span>, <span class="string">"img-min"</span>, <span class="string">"css-min"</span>, <span class="string">"html"</span>, <span class="string">"zip"</span>]);</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[10:22:54] Starting <span class="string">'clean'</span>...</div><div class="line">[10:22:54] Starting <span class="string">'js-min'</span>...</div><div class="line">[10:22:54] Starting <span class="string">'img-min'</span>...</div><div class="line">[10:22:54] Starting <span class="string">'css-min'</span>...</div><div class="line">[10:22:54] Starting <span class="string">'html'</span>...</div><div class="line">[10:22:54] Starting <span class="string">'zip'</span>...</div><div class="line">[10:22:54] Finished <span class="string">'css-min'</span> after 88 ms</div><div class="line">[10:22:54] Finished <span class="string">'html'</span> after 86 ms</div><div class="line">[10:22:54] Finished <span class="string">'clean'</span> after 255 ms</div><div class="line">[10:22:54] Finished <span class="string">'zip'</span> after 549 ms</div><div class="line">[10:22:55] Finished <span class="string">'js-min'</span> after 1.5 s</div><div class="line">[10:22:56] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)</div><div class="line">[10:22:56] Finished <span class="string">'img-min'</span> after 2.46 s</div><div class="line">[10:22:56] Starting <span class="string">'build'</span>...</div><div class="line">[10:22:56] Finished <span class="string">'build'</span> after 14 μs</div></pre></td></tr></table></figure>
<blockquote>
<p>ToT!!!这样的任务执行完全错乱了，执行zip压缩时，我前面的js压缩，图片压缩等文件还没完整。这个压缩包生成后文件不完整呀！我想要的是：圆括号里面串行，中括号里面并行。如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="string">"clean"</span>, [<span class="string">"js-min"</span>,<span class="string">"img-min"</span>, <span class="string">"css-min"</span>, <span class="string">"html"</span>], <span class="string">"zip"</span>)</div></pre></td></tr></table></figure>
<p><strong>有什么办法可以解决？</strong></p>
<ul>
<li>标注依赖，但有时要处理多个依赖，依赖与依赖之间的依赖（麻烦，不推荐）</li>
<li>使用插件<a href="https://github.com/teambition/gulp-sequence" title="gulp-sequence" target="_blank" rel="external">gulp-sequence</a> （不想升4.0 但有同步执行的需求时可用）</li>
<li>使用gulp4.0 的 <code>gulp.series()</code>（超好用，推荐）</li>
</ul>
<p>使用gulp4.0的新API，我们可以把任务改成如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">"build"</span>, gulp.series(<span class="string">"clean"</span>,  gulp.parallel(<span class="string">"js-min"</span>,<span class="string">"img-min"</span>, <span class="string">"css-min"</span>, <span class="string">"html"</span>), <span class="string">"zip"</span>));</div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>gulp.series()</code>里的任务是同步执行的，<code>gulp.parallel()</code>里的任务是异步执行的。</p>
</blockquote>
<p>再执行一次gulp build看看效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[15:36:53] Starting <span class="string">'build'</span>...</div><div class="line">[15:36:53] Starting <span class="string">'clean'</span>...</div><div class="line">[15:36:54] Finished <span class="string">'clean'</span> after 24 ms</div><div class="line">[15:36:55] Starting <span class="string">'parallel'</span>...</div><div class="line">[15:36:55] Starting <span class="string">'js-min'</span>...</div><div class="line">[15:36:55] Starting <span class="string">'img-min'</span>...</div><div class="line">[15:36:55] Starting <span class="string">'css-min'</span>...</div><div class="line">[15:36:55] Starting <span class="string">'html'</span>...</div><div class="line">[15:36:55] Finished <span class="string">'js-min'</span> after 88 s</div><div class="line">[15:36:55] Finished <span class="string">'css-min'</span> after 67 ms</div><div class="line">[15:36:55] Finished <span class="string">'html'</span> after 67 ms</div><div class="line">[15:36:57] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)</div><div class="line">[15:36:57] Finished <span class="string">'img-min'</span> after 2.25 s</div><div class="line">[15:36:57] Finished <span class="string">'parallel'</span> after 2.25 s</div><div class="line">[15:36:57] Starting <span class="string">'zip'</span>...</div><div class="line">[15:36:57] Finished <span class="string">'zip'</span> after 63 ms</div><div class="line">[15:36:57] Finished <span class="string">'build'</span> after 3.62 s</div></pre></td></tr></table></figure></p>
<p>太棒了，这才是我 想要的！</p>
<p>##gulp 4.0安装办法</p>
<p>####如果之前安装过gulp 4.0前的版本，需把原来的旧版本卸载掉，执行下面代码，没装过则跳过此步骤<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 卸载全局的 gulp</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm uninstall <span class="string">'gulp-cli'</span> -g</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm uninstall <span class="string">'gulp'</span> -g</span></div><div class="line"><span class="meta">#</span><span class="bash"> 到项目目录里卸载本地的 gulp</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm uninstall <span class="string">'gulp'</span> --save-dev</span></div></pre></td></tr></table></figure></p>
<p>####开始全新安装gulp 4.0<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 安装全局的 gulp 4.0</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm install <span class="string">'gulpjs/gulp-cli'</span> -g</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm install <span class="string">'gulpjs/gulp#4.0'</span> -g</span></div><div class="line"><span class="meta">#</span><span class="bash"> 安装本地的 gulp 4.0</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm install <span class="string">'gulpjs/gulp#4.0'</span> --save-dev</span></div></pre></td></tr></table></figure></p>
<p>##变新日志</p>
<p>我们来瞄一瞄4.0新版有什么不同（<a href="https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md" title="CHANGELOG.md" target="_blank" rel="external">CHANGELOG.md</a>）：</p>
<p>###任务系统变化（基于 bach，替换掉了原先基于 orchestrator 的任务系统）</p>
<ul>
<li>移除 <code>gulp.reset</code></li>
<li><code>gulp.task</code> 不再支持三个参数的用法</li>
<li><code>gulp.task</code> 用字符串注册的任务必须是直接在命令行中调用的任务</li>
<li><code>gulp.task</code> 可以接受单参数语法，这个参数必须是一个命名函数，函数名会被作为任务名</li>
<li>添加了 <code>gulp.series</code> 和 <code>gulp.parallel</code> 方法用于组合任务</li>
<li>添加了 <code>gulp.tree</code> 方法用于获取任务树，传入 <code>{ deep: true }</code> 参数可以得到一个 <code>archy</code> 兼容的节点列表</li>
<li>添加了 <code>gulp.registry</code> 方法以定制注册表。</li>
</ul>
<p>###命令行变化</p>
<ul>
<li>将命令行分离出来成为一个独立模块，以便节约带宽/空间。用 <code>npm install gulp -g</code> 或 <code>npm install gulp-cli -g</code> 都可以安装命令行，只是 <code>gulp-cli</code> 不包含模块代码所以比较小</li>
<li>命令行添加了 <code>--tasks-json</code> 参数，可以导出整个任务树以供他用</li>
<li>命令行添加了 <code>—verify</code> 参数用以检查 <code>package.json</code> 中是否包含黑名单插件（违背准则而被禁入官方插件列表的可怜娃们）。</li>
</ul>
<p>###文件系统变化</p>
<ul>
<li>添加了 <code>gulp.symlink</code> 方法，功能和 <code>gulp.dest</code> 一致，不过是以软链接的方式</li>
<li><code>gulp.dest</code> 和 <code>gulp.symlink</code> 方法添加了 <code>dirMode</code> 参数允许对目标目录更好地控制</li>
<li><code>gulp.src</code> 接收的文件匹配字符串会顺序解释，所以你可以写成这样 <code>gulp.src([&#39;*.js&#39;, &#39;!b*.js&#39;, &#39;bad.js’])</code>（排除所有以 b 开头的 JS 文件但是除了 bad.js）</li>
<li><code>gulp.src</code> 性能进行极大的改进</li>
<li><code>gulp.src</code> 方法添加了 <code>since</code> 选项，筛选在特定时间点之后修改过的文件（用于增量编译）</li>
<li><code>gulp.dest</code> 方法添加了 <code>overwrite</code> 选项 允许你启用或禁用现有的文件覆盖</li>
</ul>
<p>##参考<br><a href="https://segmentfault.com/a/1190000002528547" target="_blank" rel="external">https://segmentfault.com/a/1190000002528547</a><br><a href="http://www.gulpjs.com.cn/docs/recipes/running-tasks-in-series/" target="_blank" rel="external">http://www.gulpjs.com.cn/docs/recipes/running-tasks-in-series/</a><br><a href="http://zhangruojun.com/gulpshun-xu-zhi-xing-ren-wu/" target="_blank" rel="external">http://zhangruojun.com/gulpshun-xu-zhi-xing-ren-wu/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/gulp4.0-2x.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;gulp4.0开发1年多了，但是一直没有做为最新的稳定版本对外发布，最近才得知，真是孤陋寡闻一回。初探了一下，发现任务系统的变化蛮大，而且不再兼容3.x 及之前版本的任务系统。个人感受最深的是增加了 &lt;code&gt;gulp.series()&lt;/code&gt; 和 &lt;code&gt;gulp.parallel()&lt;/code&gt; 方法用于组合任务，多个任务执行时，&lt;strong&gt;可控制任务是异步（并行）或同步（串行），甚至是部分异步，部分同步。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##全新的 gulp.task()&lt;br&gt;从 3.x 升级到 4.x 主要做的就是修改任务定义，以前的任务是这么写的：&lt;br&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的任务写法在 Gulp 4.0 下要进行修改，要改成这样：&lt;br&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对比一下代码，这里有两点要强调说明一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么多了个&lt;code&gt;return&lt;/code&gt;，是因为目前的任务组合可同步，也可异步，所以整个任务定义函数要做为一个返回值来设定，&lt;a href=&quot;https://github.com/gulpjs/gulp/blob/4.0/docs/API.md#async-support&quot; title=&quot;详细请看文档&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详细请看文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gulp.series()&lt;/code&gt;里的任务是同步执行的，&lt;code&gt;gulp.parallel()&lt;/code&gt;里的任务是异步执行的&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;所以之前3.x的&lt;code&gt;gulpfile.js&lt;/code&gt; 切换到4.0版本是要修改一下的，否则执行时会报错。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新的gulp.task 返回接受两种新的方式  &lt;code&gt;Return a child process&lt;/code&gt;     &lt;code&gt;Return a RxJS observable&lt;/code&gt;  这非常方便插件开发者进行 gulp插件定制。&lt;br&gt;&lt;strong&gt;Return a child process&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; spawn(&lt;span class=&quot;string&quot;&gt;&#39;rm&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;-rf&#39;&lt;/span&gt;, path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;)]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Return a RxJS observable&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Observable = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;rx&#39;&lt;/span&gt;).Observable;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;sometask&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.return(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##gulp同步执行任务&lt;br&gt;4.0之前 gulpr任务的执行都是异步的，但总有些场景是需要并行的&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&quot;build&quot;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&quot;clean&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;js-min&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;img-min&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;css-min&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;html&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;zip&quot;&lt;/span&gt;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Starting &lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Starting &lt;span class=&quot;string&quot;&gt;&#39;js-min&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Starting &lt;span class=&quot;string&quot;&gt;&#39;img-min&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Starting &lt;span class=&quot;string&quot;&gt;&#39;css-min&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Starting &lt;span class=&quot;string&quot;&gt;&#39;html&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Starting &lt;span class=&quot;string&quot;&gt;&#39;zip&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Finished &lt;span class=&quot;string&quot;&gt;&#39;css-min&#39;&lt;/span&gt; after 88 ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Finished &lt;span class=&quot;string&quot;&gt;&#39;html&#39;&lt;/span&gt; after 86 ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Finished &lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt; after 255 ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:54] Finished &lt;span class=&quot;string&quot;&gt;&#39;zip&#39;&lt;/span&gt; after 549 ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:55] Finished &lt;span class=&quot;string&quot;&gt;&#39;js-min&#39;&lt;/span&gt; after 1.5 s&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:56] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:56] Finished &lt;span class=&quot;string&quot;&gt;&#39;img-min&#39;&lt;/span&gt; after 2.46 s&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:56] Starting &lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[10:22:56] Finished &lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt; after 14 μs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端工作流程自动化—node-webkit打包自动化工具</title>
    <link href="http://iamsonic.net/2015/06/23/automate-node-webkit/"/>
    <id>http://iamsonic.net/2015/06/23/automate-node-webkit/</id>
    <published>2015-06-23T07:24:34.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/21.png" alt=""></p>
<h2 id="这货能干嘛？"><a href="#这货能干嘛？" class="headerlink" title="这货能干嘛？"></a>这货能干嘛？</h2><blockquote>
<p>node-webkit（现改名为<a href="https://nwjs.io/" target="_blank" rel="external">NW.js</a>）是基于 <a href="https://www.chromium.org/" target="_blank" rel="external">Chromium</a> 和 <a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a> 开发的应用。通过它，你可以使用HTML5、JavaScript、node.js模块来编写本地应用程序。</p>
</blockquote>
<h2 id="然它的好处还有这些："><a href="#然它的好处还有这些：" class="headerlink" title="然它的好处还有这些："></a>然它的好处还有这些：</h2><ul>
<li>解除了浏览器 沙盒 限制<br>跨域操作，本地文件写入操作，这些原本前端无法解决的问题。</li>
<li>可使用node.js<br>除了node.js本身的特性，意味着npm中那么多的扩展可以供你使用。</li>
<li>node-webkit还实现了本地化的API<br>例如菜单栏，系统的托盘图标支持，系统剪贴板等。</li>
<li>跨平台<br>支持 Linux, Mac OS X 和 Windows</li>
</ul>
<h3 id="我们用它做了什么？"><a href="#我们用它做了什么？" class="headerlink" title="我们用它做了什么？"></a>我们用它做了什么？</h3><p>通过这个神器，我们把一些内部的繁琐的工作封装打包成可执行的桌面应用，一次打开即可使，无需安装。</p>
<h3 id="如何用它来开发一个本地应用？"><a href="#如何用它来开发一个本地应用？" class="headerlink" title="如何用它来开发一个本地应用？"></a>如何用它来开发一个本地应用？</h3><h4 id="1-下载最新版本node-webkit，并解压，解开后目录如下："><a href="#1-下载最新版本node-webkit，并解压，解开后目录如下：" class="headerlink" title="1.下载最新版本node-webkit，并解压，解开后目录如下："></a>1.下载最新版本<a href="https://nwjs.io/" target="_blank" rel="external">node-webkit</a>，并解压，解开后目录如下：</h4><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/22.png" alt=""></p>
<h4 id="2-在源码根目录下需要建立-package-json-进行配置，用于指定启动读取页面，窗体宽高等等，详细的参数和介绍可以看-官方文档"><a href="#2-在源码根目录下需要建立-package-json-进行配置，用于指定启动读取页面，窗体宽高等等，详细的参数和介绍可以看-官方文档" class="headerlink" title="2.在源码根目录下需要建立 package.json 进行配置，用于指定启动读取页面，窗体宽高等等，详细的参数和介绍可以看 官方文档"></a>2.在源码根目录下需要建立 package.json 进行配置，用于指定启动读取页面，窗体宽高等等，详细的参数和介绍可以看 <a href="https://github.com/nwjs/nw.js/wiki/Manifest-format" target="_blank" rel="external">官方文档</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"main"</span>: <span class="string">"main.html"</span>,     <span class="comment">// 启动页面</span></div><div class="line">	<span class="string">"name"</span>: <span class="string">"项目名称"</span>,     </div><div class="line">	<span class="string">"window"</span>: &#123;</div><div class="line">		<span class="string">"toolbar"</span>: <span class="literal">false</span>,    <span class="comment">// 工具栏</span></div><div class="line">		<span class="string">"frame"</span>: <span class="literal">false</span>,      <span class="comment">// 框架</span></div><div class="line">		<span class="string">"width"</span>: <span class="number">430</span>,        <span class="comment">// 窗体宽度</span></div><div class="line">		<span class="string">"height"</span>: <span class="number">450</span>,       <span class="comment">// 窗体高度</span></div><div class="line">		<span class="string">"resizable"</span>: <span class="literal">false</span>   <span class="comment">// 窗体是否允许改变尺寸  </span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-在框架目录基础上进行开发"><a href="#3-在框架目录基础上进行开发" class="headerlink" title="3.在框架目录基础上进行开发"></a>3.在框架目录基础上进行开发</h4><h2 id="如何本地开发及调试？"><a href="#如何本地开发及调试？" class="headerlink" title="如何本地开发及调试？"></a>如何本地开发及调试？</h2><p>本地开发时，可以把 package.json 里 “toolbar” 设置为 true ，这样就可以浏览器的开发者工具<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/23.gif" alt=""></p>
<p>如何封包成单一可执行文件？</p>
<h3 id="有3个布骤："><a href="#有3个布骤：" class="headerlink" title="有3个布骤："></a>有3个布骤：</h3><h4 id="1-项目相关的所有文件打包成一个-zip文件"><a href="#1-项目相关的所有文件打包成一个-zip文件" class="headerlink" title="1. 项目相关的所有文件打包成一个.zip文件"></a>1. 项目相关的所有文件打包成一个.zip文件</h4><p>将项目的入口文件 main.html  配置文件 package.json 及所有页面的资源（images css js node_modules ） 打包成 src.zip<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/24.png" alt=""></p>
<h4 id="2-项目文件压缩包与nw-exe合体"><a href="#2-项目文件压缩包与nw-exe合体" class="headerlink" title="2. 项目文件压缩包与nw.exe合体"></a>2. 项目文件压缩包与nw.exe合体</h4><p>把刚才打包生成的src.zip放到 node-webkit 项目目录里，执行合并的命令，生成 app.exe（这个步骤是打包生成一个exe可执行文件，但执行这个exe文件还依赖目录里的.dll .dat .pak文件）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy /b nw.exe+src.zip app.exe</div></pre></td></tr></table></figure></p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/25.gif" alt=""></p>
<h4 id="3-压缩并打包成单一可执行文件"><a href="#3-压缩并打包成单一可执行文件" class="headerlink" title="3. 压缩并打包成单一可执行文件"></a>3. 压缩并打包成单一可执行文件</h4><p>把执行这个exe文件所依赖的 .dll等文件再次打包进exe文件里，这里需要使用一个工具：<a href="http://enigmaprotector.com/en/aboutvb.html" target="_blank" rel="external">Enigma Virtual Box</a>。</p>
<h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><ul>
<li>下载，安装并打开。</li>
<li>对于中文用户可以在Language菜单中选择Chinese</li>
<li>在请选择待封包的主程中浏览和选择主程序，如app.exe。</li>
<li>拖拽（或者单击Add按钮）所有依赖项，包括<em>.dll </em>.dat 和nw.pak到File选项卡的空白处。</li>
<li>选择选择文件选项，选择压缩文件来压缩。（压缩可以减少最终的exe文件大小，但程序的执行会相应变慢，是否压缩可按具体情况而定）</li>
<li>点击执行封包。<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/26.png" alt=""></li>
</ul>
<h2 id="如何修改可执行文件图标？"><a href="#如何修改可执行文件图标？" class="headerlink" title="如何修改可执行文件图标？"></a>如何修改可执行文件图标？</h2><p>好不容易做完的工具封装打包完成，你发现图标还是nw.exe的默认图标，这就需要我们对图标进行自定义。这里又用一个工具 <a href="http://www.angusj.com/resourcehacker/" target="_blank" rel="external">Resource Hacker</a></p>
<ul>
<li>安装Resouce Hacker并打开程序</li>
<li>把要更新icon的应用程序拖放在左边区域，并在左边的面板中选择  Icon Group&gt; IDR_MAINFRAME </li>
<li>选择新的icon用于替换旧的icon  菜单 Action &gt; Replace Icon </li>
<li>保存修改 File &gt; Save （<strong>由于旧Icon有缓存，需要过一会再刷新才能看到更换后的效果</strong>）<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/27.gif" alt=""></li>
</ul>
<blockquote>
<p>以上就是通过 node-webkit 封装打包桌面工具的整个流程，布骤有点繁琐。</p>
</blockquote>
<p>node.js 有个模块node-webkit-builder可以进行项目的构建，可以选择构建成win和osx 平台，并选择node-webkit的版本。（不足的是：不能完成单一执行文件封装和图标修改）</p>
<h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p><a href="http://nwjs.io/" target="_blank" rel="external">http://nwjs.io/</a><br><a href="https://github.com/nwjs/nw.js/wiki/How-to-run-apps" target="_blank" rel="external">https://github.com/nwjs/nw.js/wiki/How-to-run-apps</a><br><a href="https://github.com/nwjs/nw.js/wiki/How-to-package-and-distribute-your-apps" target="_blank" rel="external">https://github.com/nwjs/nw.js/wiki/How-to-package-and-distribute-your-apps</a><br><a href="http://www.techtalkz.com/tips-n-tricks/3866-how-change-default-icon-exe-using-resource-editor-resource-hacker.html" target="_blank" rel="external">http://www.techtalkz.com/tips-n-tricks/3866-how-change-default-icon-exe-using-resource-editor-resource-hacker.html</a><br><a href="https://github.com/mllrsohn/node-webkit-builder" target="_blank" rel="external">https://github.com/mllrsohn/node-webkit-builder</a><br><a href="http://blog.inching.org/2014/03/19/node-webkit-package/" target="_blank" rel="external">http://blog.inching.org/2014/03/19/node-webkit-package/</a><br><a href="https://cnodejs.org/topic/53233277bfb7097d7a00059e" target="_blank" rel="external">https://cnodejs.org/topic/53233277bfb7097d7a00059e</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/21.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;这货能干嘛？&quot;&gt;&lt;a href=&quot;#这货能干嘛？&quot; class=&quot;headerlink&quot; title=&quot;这货能干嘛？&quot;&gt;&lt;/a&gt;这货能干嘛？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;node-webkit（现改名为&lt;a href=&quot;https://nwjs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NW.js&lt;/a&gt;）是基于 &lt;a href=&quot;https://www.chromium.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chromium&lt;/a&gt; 和 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node.js&lt;/a&gt; 开发的应用。通过它，你可以使用HTML5、JavaScript、node.js模块来编写本地应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;然它的好处还有这些：&quot;&gt;&lt;a href=&quot;#然它的好处还有这些：&quot; class=&quot;headerlink&quot; title=&quot;然它的好处还有这些：&quot;&gt;&lt;/a&gt;然它的好处还有这些：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;解除了浏览器 沙盒 限制&lt;br&gt;跨域操作，本地文件写入操作，这些原本前端无法解决的问题。&lt;/li&gt;
&lt;li&gt;可使用node.js&lt;br&gt;除了node.js本身的特性，意味着npm中那么多的扩展可以供你使用。&lt;/li&gt;
&lt;li&gt;node-webkit还实现了本地化的API&lt;br&gt;例如菜单栏，系统的托盘图标支持，系统剪贴板等。&lt;/li&gt;
&lt;li&gt;跨平台&lt;br&gt;支持 Linux, Mac OS X 和 Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;我们用它做了什么？&quot;&gt;&lt;a href=&quot;#我们用它做了什么？&quot; class=&quot;headerlink&quot; title=&quot;我们用它做了什么？&quot;&gt;&lt;/a&gt;我们用它做了什么？&lt;/h3&gt;&lt;p&gt;通过这个神器，我们把一些内部的繁琐的工作封装打包成可执行的桌面应用，一次打开即可使，无需安装。&lt;/p&gt;
&lt;h3 id=&quot;如何用它来开发一个本地应用？&quot;&gt;&lt;a href=&quot;#如何用它来开发一个本地应用？&quot; class=&quot;headerlink&quot; title=&quot;如何用它来开发一个本地应用？&quot;&gt;&lt;/a&gt;如何用它来开发一个本地应用？&lt;/h3&gt;&lt;h4 id=&quot;1-下载最新版本node-webkit，并解压，解开后目录如下：&quot;&gt;&lt;a href=&quot;#1-下载最新版本node-webkit，并解压，解开后目录如下：&quot; class=&quot;headerlink&quot; title=&quot;1.下载最新版本node-webkit，并解压，解开后目录如下：&quot;&gt;&lt;/a&gt;1.下载最新版本&lt;a href=&quot;https://nwjs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-webkit&lt;/a&gt;，并解压，解开后目录如下：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/22.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="automate,workflow,node-webkit" scheme="http://iamsonic.net/tags/automate-workflow-node-webkit/"/>
    
  </entry>
  
  <entry>
    <title>前端工作流程自动化—Node.js编写小工具</title>
    <link href="http://iamsonic.net/2014/11/25/automate-node-script/"/>
    <id>http://iamsonic.net/2014/11/25/automate-node-script/</id>
    <published>2014-11-24T23:16:34.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/9.jpeg" alt=""><br>关于node.js就不多介绍了。node.js具备文件操作的功能，这其实就能够来做很多事情，比如：文件的批量重命名，数据分析、数据爬虫脚本……这里提供两个简单的例子，主要用到以下两个原生模块：</p>
<ul>
<li><strong>(file system)模块</strong><br>实现文件的创建、读取、写入、编辑、删除</li>
<li><strong>path模块</strong><br>实现文件路径的生成和管理</li>
</ul>
<h3 id="例子1-超简单实例认识fs-path"><a href="#例子1-超简单实例认识fs-path" class="headerlink" title="例子1 - 超简单实例认识fs path"></a>例子1 - 超简单实例认识fs path</h3><h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><ul>
<li>当前目录创建hello.txt；</li>
<li>在hello.txt里写入文字“Hello Node”；</li>
<li>成功后打印出hello.txt的目录。</li>
</ul>
<h4 id="功能截图"><a href="#功能截图" class="headerlink" title="功能截图"></a>功能截图</h4><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/10.gif" alt=""></p>
<h4 id="代码浏览"><a href="#代码浏览" class="headerlink" title="代码浏览"></a>代码浏览</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> rootPath = path.dirname(__filename);</div><div class="line"></div><div class="line">fs.writeFile(<span class="string">'hello.txt'</span>, <span class="string">'Hello Node'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'hello.txt 创建成功，文件地址如下：'</span>)</div><div class="line">	<span class="built_in">console</span>.log(rootPath + <span class="string">'/hello.txt'</span>);</div><div class="line">	fs.open(<span class="string">'hello.txt'</span>,<span class="string">'rs+'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="例子2-生成文件URL列表"><a href="#例子2-生成文件URL列表" class="headerlink" title="例子2 -生成文件URL列表**"></a>例子2 -生成文件URL列表**</h3><h4 id="功能介绍-1"><a href="#功能介绍-1" class="headerlink" title="功能介绍"></a>功能介绍</h4><ul>
<li>把当前目录下所有文件记录进url.txt</li>
<li>支持递归，子目录下的文件也能记录</li>
</ul>
<h4 id="功能截图-1"><a href="#功能截图-1" class="headerlink" title="功能截图"></a>功能截图</h4><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/12.gif" alt=""></p>
<h4 id="代码浏览-1"><a href="#代码浏览-1" class="headerlink" title="代码浏览"></a>代码浏览</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> fileList = [];</div><div class="line"><span class="keyword">var</span> rootPath = path.dirname(__filename)</div><div class="line"><span class="keyword">var</span> curPath = rootPath.split(path.sep);</div><div class="line">    curPath = curPath[curPath.length<span class="number">-1</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">dir</span>)</span>&#123;  </div><div class="line">    <span class="keyword">var</span> dirList = fs.readdirSync(dir);</div><div class="line">    dirList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(item == <span class="string">".DS_Store"</span>) <span class="keyword">return</span></div><div class="line">        <span class="keyword">if</span>(fs.statSync(dir + <span class="string">'/'</span> + item).isDirectory())&#123;</div><div class="line">            walk(dir + <span class="string">'/'</span> + item);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">var</span> pp = dir.substr(dir.indexOf(curPath));</div><div class="line">            fileList.push(pp + <span class="string">'/'</span> + item);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">whiteInToTxt</span>(<span class="params">list</span>)</span>&#123;</div><div class="line">    walk(rootPath);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"当前目录下的文件列表如下------"</span>)</div><div class="line">    <span class="built_in">console</span>.log(fileList);</div><div class="line">    <span class="keyword">if</span> (list)&#123;</div><div class="line">        fs.writeFile(<span class="string">'url.txt'</span>, <span class="string">'---File Url List---'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">                fs.appendFile(<span class="string">'url.txt'</span>, <span class="string">'\n'</span>+item, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                &#125;);</div><div class="line">            &#125;)</div><div class="line">            <span class="built_in">console</span>.log(list.length + <span class="string">' 个文件已记录进url.txt'</span> )</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">whiteInToTxt(fileList);</div></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h3><p>Node.js fs path<br><a href="http://nodejs.org/" target="_blank" rel="external">http://nodejs.org/</a><br><a href="http://nodejs.org/api/fs.html" target="_blank" rel="external">http://nodejs.org/api/fs.html</a><br><a href="http://nodejs.org/api/path.html" target="_blank" rel="external">http://nodejs.org/api/path.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/9.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;关于node.js就不多介绍了。node.js具备文件操作的功能，这其实就能够来做很多事情，比如：文件的批量重命名，数据分析、数据爬虫脚本……这里提供两个简单的例子，主要用到以下两个原生模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;(file system)模块&lt;/strong&gt;&lt;br&gt;实现文件的创建、读取、写入、编辑、删除&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;path模块&lt;/strong&gt;&lt;br&gt;实现文件路径的生成和管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;例子1-超简单实例认识fs-path&quot;&gt;&lt;a href=&quot;#例子1-超简单实例认识fs-path&quot; class=&quot;headerlink&quot; title=&quot;例子1 - 超简单实例认识fs path&quot;&gt;&lt;/a&gt;例子1 - 超简单实例认识fs path&lt;/h3&gt;&lt;h4 id=&quot;功能介绍&quot;&gt;&lt;a href=&quot;#功能介绍&quot; class=&quot;headerlink&quot; title=&quot;功能介绍&quot;&gt;&lt;/a&gt;功能介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;当前目录创建hello.txt；&lt;/li&gt;
&lt;li&gt;在hello.txt里写入文字“Hello Node”；&lt;/li&gt;
&lt;li&gt;成功后打印出hello.txt的目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;功能截图&quot;&gt;&lt;a href=&quot;#功能截图&quot; class=&quot;headerlink&quot; title=&quot;功能截图&quot;&gt;&lt;/a&gt;功能截图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/10.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;代码浏览&quot;&gt;&lt;a href=&quot;#代码浏览&quot; class=&quot;headerlink&quot; title=&quot;代码浏览&quot;&gt;&lt;/a&gt;代码浏览&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rootPath = path.dirname(__filename);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fs.writeFile(&lt;span class=&quot;string&quot;&gt;&#39;hello.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Hello Node&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hello.txt 创建成功，文件地址如下：&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(rootPath + &lt;span class=&quot;string&quot;&gt;&#39;/hello.txt&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fs.open(&lt;span class=&quot;string&quot;&gt;&#39;hello.txt&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;rs+&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;例子2-生成文件URL列表&quot;&gt;&lt;a href=&quot;#例子2-生成文件URL列表&quot; class=&quot;headerlink&quot; title=&quot;例子2 -生成文件URL列表**&quot;&gt;&lt;/a&gt;例子2 -生成文件URL列表**&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端工作流程自动化—Grunt/Gulp 自动化</title>
    <link href="http://iamsonic.net/2014/11/21/automate-grunt-gulp/"/>
    <id>http://iamsonic.net/2014/11/21/automate-grunt-gulp/</id>
    <published>2014-11-21T06:59:04.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Grunt/Gulp 都是node.js下的模块，简单来说是自动化任务运行器，两者都有社区及大量的插件支撑，在所有的自动化工具领域里，这两者是最好的前端自动化构建工具。<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/13.png" alt=""></p>
<blockquote>
<p>那么问题来了，Grunt和Gulp到底哪家强？</p>
</blockquote>
<p>在回答这个问题前，先给大家看一组下面的数据：(数据更新于：2016-8-28)</p>
<table>
<thead>
<tr>
<th>社区插件</th>
<th>配置</th>
<th>API</th>
<th>构建系统</th>
</tr>
</thead>
<tbody>
<tr>
<td>Grunt</td>
<td>5,869</td>
<td>方便</td>
<td>任务式</td>
</tr>
<tr>
<td>Gulp</td>
<td>2,604</td>
<td>更方便</td>
<td>流</td>
</tr>
</tbody>
</table>
<h4 id="再看看实现同样功能的配置代码："><a href="#再看看实现同样功能的配置代码：" class="headerlink" title="再看看实现同样功能的配置代码："></a>再看看实现同样功能的配置代码：</h4><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/16.png" alt=""></p>
<p>作者本人之前一直使用Grunt来做自动化构建的，在Gulp出来后，经过一段时间的试用感觉配置比Grunt方便多了，如果你两者还没接触过，本人推荐直接使用Gulp，毕竟简单实用门槛低才是硬道理。</p>
<h4 id="相比Grunt，Gulp具备以下优点："><a href="#相比Grunt，Gulp具备以下优点：" class="headerlink" title="相比Grunt，Gulp具备以下优点："></a>相比Grunt，Gulp具备以下优点：</h4><ul>
<li>配置更简洁，而且遵循代码优于配置策略，维护Gulp更像是写代码；</li>
<li>易学，核心API只有5个，通过管道流组合自己想要的任务；</li>
<li>一个插件只完成一个功能， 这也是Unix的设计原则之一，各个功能通过流进行整合并完成复杂的任务。</li>
</ul>
<h4 id="当然也有劣势："><a href="#当然也有劣势：" class="headerlink" title="当然也有劣势："></a>当然也有劣势：</h4><ul>
<li>相对Grunt而言，插件相对较少；</li>
<li>自动化可配置性不够Grunt强。</li>
</ul>
<p>基于目前重构/前端的工作内容，需用到自动化功能大多数还是文件的处理，如压缩，合并，打包、检测、构建……，以上提到的两点劣势在目前的工作层面感受不明显，况且Gulp出现的目的是希望能够取代Grunt，成为最流行的自动化任务运行器。</p>
<h4 id="Gulp能为我们做什么？以下这张图可以告诉你（包括但不限于）"><a href="#Gulp能为我们做什么？以下这张图可以告诉你（包括但不限于）" class="headerlink" title="Gulp能为我们做什么？以下这张图可以告诉你（包括但不限于）"></a>Gulp能为我们做什么？以下这张图可以告诉你（包括但不限于）</h4><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/17.png" alt=""></p>
<h4 id="Gulp的安装配置"><a href="#Gulp的安装配置" class="headerlink" title="Gulp的安装配置"></a>Gulp的安装配置</h4><p>由于文章篇幅的考虑，这里就不把 Gulp的安装配置展开讨论，大家有兴趣可以看看 kaireewu 的 前端构建工具 Gulp.js 上手实例 。里面有详细的介绍及上手实例。</p>
<h4 id="Gulp在项目里的实践"><a href="#Gulp在项目里的实践" class="headerlink" title="Gulp在项目里的实践"></a>Gulp在项目里的实践</h4><p>目前本人负责游戏官网的网页重构工作，日常的项目的编码及构建都使用Gulp。主要有应用有如下：</p>
<h4 id="应用场景介绍"><a href="#应用场景介绍" class="headerlink" title="应用场景介绍"></a>应用场景介绍</h4><ol>
<li><p>开始一个项目（gulp init-simple）<br>新建一个项目文件夹，并把预设的目录及文件拷贝到新建的项目文件夹里。</p>
</li>
<li><p>启动文件变更检测服务（gulp watch）<br>开始编码前先执行启动服务，打开<a href="http://localhost:8080查看页面，当项目里的" target="_blank" rel="external">http://localhost:8080查看页面，当项目里的</a> .html/.css/.js 文件发生变更时，浏览器自动对当前打开的 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 下的页面进行耍新。</p>
</li>
<li><p>线上版本编码构建（gulp build-all）<br>项目代码上线前的构建，这里的操作主要有：压缩所有的图片文件，html文件相对路径改为绝对路径，html文件编码转换，CSS/JS压缩并合并，所有处理过后的文件存放dist目录。<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/14.gif" alt=""></p>
</li>
</ol>
<p>参考链接:<br><a href="http://gruntjs.com/" target="_blank" rel="external">Grunt: The JavaScript Task Runner</a><br><a href="http://gulpjs.com/" target="_blank" rel="external">gulp.js - the streaming build system</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Grunt/Gulp 都是node.js下的模块，简单来说是自动化任务运行器，两者都有社区及大量的插件支撑，在所有的自动化工具领域里，这两者是最好的前端自动化构建工具。&lt;br&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/13.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那么问题来了，Grunt和Gulp到底哪家强？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在回答这个问题前，先给大家看一组下面的数据：(数据更新于：2016-8-28)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;社区插件&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;API&lt;/th&gt;
&lt;th&gt;构建系统&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Grunt&lt;/td&gt;
&lt;td&gt;5,869&lt;/td&gt;
&lt;td&gt;方便&lt;/td&gt;
&lt;td&gt;任务式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gulp&lt;/td&gt;
&lt;td&gt;2,604&lt;/td&gt;
&lt;td&gt;更方便&lt;/td&gt;
&lt;td&gt;流&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;再看看实现同样功能的配置代码：&quot;&gt;&lt;a href=&quot;#再看看实现同样功能的配置代码：&quot; class=&quot;headerlink&quot; title=&quot;再看看实现同样功能的配置代码：&quot;&gt;&lt;/a&gt;再看看实现同样功能的配置代码：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者本人之前一直使用Grunt来做自动化构建的，在Gulp出来后，经过一段时间的试用感觉配置比Grunt方便多了，如果你两者还没接触过，本人推荐直接使用Gulp，毕竟简单实用门槛低才是硬道理。&lt;/p&gt;
&lt;h4 id=&quot;相比Grunt，Gulp具备以下优点：&quot;&gt;&lt;a href=&quot;#相比Grunt，Gulp具备以下优点：&quot; class=&quot;headerlink&quot; title=&quot;相比Grunt，Gulp具备以下优点：&quot;&gt;&lt;/a&gt;相比Grunt，Gulp具备以下优点：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;配置更简洁，而且遵循代码优于配置策略，维护Gulp更像是写代码；&lt;/li&gt;
&lt;li&gt;易学，核心API只有5个，通过管道流组合自己想要的任务；&lt;/li&gt;
&lt;li&gt;一个插件只完成一个功能， 这也是Unix的设计原则之一，各个功能通过流进行整合并完成复杂的任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;当然也有劣势：&quot;&gt;&lt;a href=&quot;#当然也有劣势：&quot; class=&quot;headerlink&quot; title=&quot;当然也有劣势：&quot;&gt;&lt;/a&gt;当然也有劣势：&lt;/h4&gt;
    
    </summary>
    
    
      <category term="automate,workflow,grunt,gulp" scheme="http://iamsonic.net/tags/automate-workflow-grunt-gulp/"/>
    
  </entry>
  
  <entry>
    <title>前端工作流程自动化—PS脚本自动化(Photoshop Scripting)</title>
    <link href="http://iamsonic.net/2014/11/18/automate-ps-scripts/"/>
    <id>http://iamsonic.net/2014/11/18/automate-ps-scripts/</id>
    <published>2014-11-18T11:58:21.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/4.png" alt=""><br>提到PS的自动化，大家最先想到的应该是“录制动作”，但“录制动作”只能做一些模式非常固定的重复事情，比如对图片批量地加上水印，修改大小并保存这类操作。今天介绍的是PS脚本，相对于“录制动作”，它具备下面几点优势：</p>
<ol>
<li><strong>支持变量的使用</strong><br>动作无法使用变量，它只是忠实地记录了用户的操作，播放动作的时候也只能机械地重现这一操作过程。</li>
<li><strong>流程控制</strong><br>脚本可以通过分支语句对实际情况进行逻辑判断，然后选择不同的流程。</li>
<li><strong>同时操控多个应用程序</strong><br>可以在支持脚本的应用程序（如PS、AI、AE、BR）之间传递相关信息，进而同时操控这些应用程序</li>
</ol>
<p>目前PS支持三种脚本语言，分别是<code>Apple Script</code>、<code>VBscript</code>、<code>JavaScript</code>。<code>Apple Script</code>只能在MAC平台上使用，<code>VBscript</code>只能在WINDOWS平台上使用，而<code>JavaScript</code>则是跨平台的。Adobe根据CS平台各软件的实际情况对JavaScript的功能进行了扩展，开发出了扩展版的JavaScript（即ExtandScript），相应脚本文件的扩展名为 .jsx 。PS自带的脚本的脚本可以在 PS菜单 =》 文件=》脚本 里找到。<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/5.png" alt=""></p>
<p>这里通过两个例子让大家对PS脚本有大概的了解：</p>
<h3 id="例子1-自动导出所有图片"><a href="#例子1-自动导出所有图片" class="headerlink" title="例子1 - 自动导出所有图片"></a>例子1 - 自动导出所有图片</h3><p><strong>【功能介绍】</strong><br>将来psd文件里所有图层一个一个倒出成图片，按图层名进行图片文件命名。可设置文件名前缀，图像类型。</p>
<p><strong>【功能截图】</strong><br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/6.png" alt=""></p>
<h3 id="例子2-自动生成辅助线"><a href="#例子2-自动生成辅助线" class="headerlink" title="例子2 - 自动生成辅助线**"></a>例子2 - 自动生成辅助线**</h3><p><strong>【功能介绍】</strong></p>
<ul>
<li>接受用户输入的列数字</li>
<li>根据当前文档尺寸，生成平均宽度的垂直辅助线</li>
</ul>
<p><strong>【功能截图】</strong><br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/7.gif" alt=""></p>
<p><strong>【制作步骤】</strong></p>
<ol>
<li>新建1个 CreateGuideLine.jsx 文件</li>
<li>存放在 {PS安装目录}\Presets\Scripts\</li>
<li>重启PS，在菜单 文件-&gt; 脚本  即可看到新增的脚本CreateGuideLine</li>
</ol>
<p><strong>【代码浏览】</strong><br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/8.png" alt=""></p>
<p><strong>参考链接:</strong><br> Adobe Photoshop Scripting<br> <a href="http://www.adobe.com/cn/devnet/photoshop/scripting.html" target="_blank" rel="external">http://www.adobe.com/cn/devnet/photoshop/scripting.html</a><br> Introduction To Photoshop Scripting<br> <a href="http://www.smashingmagazine.com/2013/07/25/introduction-to-photoshop-scripting/" target="_blank" rel="external">http://www.smashingmagazine.com/2013/07/25/introduction-to-photoshop-scripting/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;提到PS的自动化，大家最先想到的应该是“录制动作”，但“录制动作”只能做一些模式非常固定的重复事情，比如对图片批量地加上水印，修改大小并保存这类操作。今天介绍的是PS脚本，相对于“录制动作”，它具备下面几点优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;支持变量的使用&lt;/strong&gt;&lt;br&gt;动作无法使用变量，它只是忠实地记录了用户的操作，播放动作的时候也只能机械地重现这一操作过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流程控制&lt;/strong&gt;&lt;br&gt;脚本可以通过分支语句对实际情况进行逻辑判断，然后选择不同的流程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同时操控多个应用程序&lt;/strong&gt;&lt;br&gt;可以在支持脚本的应用程序（如PS、AI、AE、BR）之间传递相关信息，进而同时操控这些应用程序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前PS支持三种脚本语言，分别是&lt;code&gt;Apple Script&lt;/code&gt;、&lt;code&gt;VBscript&lt;/code&gt;、&lt;code&gt;JavaScript&lt;/code&gt;。&lt;code&gt;Apple Script&lt;/code&gt;只能在MAC平台上使用，&lt;code&gt;VBscript&lt;/code&gt;只能在WINDOWS平台上使用，而&lt;code&gt;JavaScript&lt;/code&gt;则是跨平台的。Adobe根据CS平台各软件的实际情况对JavaScript的功能进行了扩展，开发出了扩展版的JavaScript（即ExtandScript），相应脚本文件的扩展名为 .jsx 。PS自带的脚本的脚本可以在 PS菜单 =》 文件=》脚本 里找到。&lt;br&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里通过两个例子让大家对PS脚本有大概的了解：&lt;/p&gt;
&lt;h3 id=&quot;例子1-自动导出所有图片&quot;&gt;&lt;a href=&quot;#例子1-自动导出所有图片&quot; class=&quot;headerlink&quot; title=&quot;例子1 - 自动导出所有图片&quot;&gt;&lt;/a&gt;例子1 - 自动导出所有图片&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;【功能介绍】&lt;/strong&gt;&lt;br&gt;将来psd文件里所有图层一个一个倒出成图片，按图层名进行图片文件命名。可设置文件名前缀，图像类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【功能截图】&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/automate-corpus/6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;例子2-自动生成辅助线&quot;&gt;&lt;a href=&quot;#例子2-自动生成辅助线&quot; class=&quot;headerlink&quot; title=&quot;例子2 - 自动生成辅助线**&quot;&gt;&lt;/a&gt;例子2 - 自动生成辅助线**&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;【功能介绍】&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接受用户输入的列数字&lt;/li&gt;
&lt;li&gt;根据当前文档尺寸，生成平均宽度的垂直辅助线&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="automate,workflow,ps,script" scheme="http://iamsonic.net/tags/automate-workflow-ps-script/"/>
    
  </entry>
  
  <entry>
    <title>Node.js + MongoDB 构建Web应用</title>
    <link href="http://iamsonic.net/2014/09/24/node-mongodb-webapp/"/>
    <id>http://iamsonic.net/2014/09/24/node-mongodb-webapp/</id>
    <published>2014-09-24T05:45:49.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>2013下半年在做中心【ideas需求管理系统】的Beta版本时，在当时缺乏开发人力的情况下，身兼多职，尝试用 Node.js+MongoDB来做平台的构建，由于当时也是第一次接触Express和MongoDB，平时日常的需求又狂轰乱炸，只能利用平时中午少撸一发“德玛西亚”的时间（小撸怡情，大撸伤身）及周未攒出来的宝贵时间，现学现用。系统在2013年下半年的11月份成功上线，供中心所有重构记录需求，生成周报，为【ideas需求管理系统】奠定基础。时及今日，给大家做下分享：<br> <img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/1.jpeg" alt=""></p>
<p> 对于1个网页重构的同学，使用Node.js来做前后端构建是有一定优势的，因为你可以不用懂PHP，CGI等开发语言就可以一人搞定前后端，完成一套系统的编码构建，当然如果能懂一些自然最好，在解决一些服务器运维问题时，会更加有方向。当然您需要具备简单的Node.js安装，APP执行，读懂报错的能力，还有较好的 javascript编码能力。好吧，序章已经足够长了，下面开始，</p>
<p>##【目录】构建一个Web 应用大概会有6大步骤<br> <img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/2.jpeg" alt=""></p>
<h3 id="1-搭建node-js、npm环境"><a href="#1-搭建node-js、npm环境" class="headerlink" title="1. 搭建node.js、npm环境"></a>1. 搭建node.js、npm环境</h3><p> 提起node.js对于没有开发基础的同学来说，可能会有点排斥，觉得光搞定环境搭建及配置就够头痛的。其实现在的node.js在window环境下的安装已经不像2年前要先装个cybwin后再手动配window全局变量名那么麻烦，真心不难，直接官网下一个.exe文件，装完node.js及npm环境就已经齐了。So Easy!&nbsp;下面介绍一个非常simple的小程序带你了解node和npm环境。</p>
<h4 id="1-1-确定官方的安装包装上后，确认上node和npm已经装上："><a href="#1-1-确定官方的安装包装上后，确认上node和npm已经装上：" class="headerlink" title="1.1 确定官方的安装包装上后，确认上node和npm已经装上："></a>1.1 确定官方的安装包装上后，确认上node和npm已经装上：</h4><p>终端下敲入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p>如果有正常打印出类似的东东则成功<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/3.jpg" alt=""></p>
<h4 id="1-2-以下是一个simple-node小程序"><a href="#1-2-以下是一个simple-node小程序" class="headerlink" title="1.2 以下是一个simple node小程序"></a>1.2 以下是一个simple node小程序</h4><p> 功能：在当前目录下生成一个 test.txt 的文本文件，并对此文件上填入文字 “Hello Node”.</p>
<blockquote>
<p>以下为main.js 内容————————————————————+</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//（示例）调用File System模块 </span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); </div><div class="line">fs.writeFile(<span class="string">'test.txt'</span>, <span class="string">'Hello Node'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'It\'s saved!'</span>); </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行后结果如下：<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/4.jpeg" alt=""></p>
<h4 id="1-3-npm介绍及使用npm安装node模块"><a href="#1-3-npm介绍及使用npm安装node模块" class="headerlink" title="1.3 npm介绍及使用npm安装node模块**"></a>1.3 npm介绍及使用npm安装node模块**</h4><p>Npm是node.js的包管理器。用于安装、卸载、发布模块等。（像express/mongoose/grunt这些都是nodejs的模块）</p>
<blockquote>
<p>以下在终端下运行: ————————————————————+</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 全局安装（当前在系统目录）</div><div class="line"><span class="meta">$</span><span class="bash">npm install express -g</span></div><div class="line"></div><div class="line">// 本地安装（安装在当前目录）</div><div class="line"><span class="meta">$</span><span class="bash">npm install express</span></div></pre></td></tr></table></figure>
<p>本地安装：如果想在程序中调用该模块，则使用本地安装。<br>全局安装：如果想在命令行中调用该模块，应该使用全局安装。</p>
<h2 id="2-安装配置MongoDB数据库"><a href="#2-安装配置MongoDB数据库" class="headerlink" title="2. 安装配置MongoDB数据库"></a>2. 安装配置MongoDB数据库</h2><p>MongoDB 是一个基于分布式文件存储的数据库，由C++语言编写，旨在为WEB应用提供可扩展的高性能数据存储解决方案。下面是安排及配置方法：</p>
<h3 id="2-1-先从官网下载系统文件（http-www-mongodb-org-downloads）并解压缩文件。"><a href="#2-1-先从官网下载系统文件（http-www-mongodb-org-downloads）并解压缩文件。" class="headerlink" title="2.1 先从官网下载系统文件（http://www.mongodb.org/downloads）并解压缩文件。"></a>2.1 先从官网下载系统文件（<a href="http://www.mongodb.org/downloads" target="_blank" rel="external">http://www.mongodb.org/downloads</a>）并解压缩文件。</h3><p>将压缩包解压，在D盘创建文件夹MongoDB,将压缩包中所有的.exe文件拷到D:MongoDB文件夹中。 </p>
<h3 id="2-2-建立工作目录。"><a href="#2-2-建立工作目录。" class="headerlink" title="2.2 建立工作目录。 　　"></a>2.2 建立工作目录。 　　</h3><ul>
<li>1、建立数据存放目录&nbsp;&nbsp;D:\mongodb\data 　　</li>
<li>2、建立日志文件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D:\mongodb\log\mongodb.log </li>
</ul>
<h3 id="2-3-设置系统变量。为了方便从控制台中管理mongodb，不用每次都进入到D-MongoDB中。"><a href="#2-3-设置系统变量。为了方便从控制台中管理mongodb，不用每次都进入到D-MongoDB中。" class="headerlink" title="2.3 设置系统变量。为了方便从控制台中管理mongodb，不用每次都进入到D:MongoDB中。"></a>2.3 设置系统变量。为了方便从控制台中管理mongodb，不用每次都进入到D:MongoDB中。</h3><p>我的电脑–属性–高级–环境变量–系统变量中的path,加上;D:\MongoDB ，注意前面加上分号。如下图：<br> <a href="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/5.png" target="_blank" rel="external"></a></p>
<h3 id="2-4-启动mongdb服务。"><a href="#2-4-启动mongdb服务。" class="headerlink" title="2.4 启动mongdb服务。 　　"></a>2.4 启动mongdb服务。 　　</h3><p>进入控制台中，输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod.exe --dbpath=D:\MongoDB\data 。</div></pre></td></tr></table></figure></p>
<p>如下图：<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/52.png" alt=""><br>这样服务就启动了，正常情况下会显示如下：<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/53.png" alt=""><br>如果你觉得每次启动都要在终端敲入那么长的代码，可以选择在mongoDB的安装目录下做个 starMongo.bat 文件，把启动代码写在里面，下次启动时，在终端敲入 starMongo 即可，当然你还可以把文件放在启动目录里，这样下次开机启动去MongoDB的服务也启动了。<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/6.jpg" alt=""><br>在浏览器中输入<a href="http://localhost:27017/" target="_blank" rel="external">http://localhost:27017/</a>。<br>会出现 You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number </p>
<p>表示服务已经启动。<br>不要关闭当前这个控制台窗口，另起一个控制台，输入mongo.如下图：<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/62.png" alt=""><br>表示已成功连接到mongdb.</p>
<h2 id="3-npm安装express-jade-mongoose-模块"><a href="#3-npm安装express-jade-mongoose-模块" class="headerlink" title="3. npm安装express + jade + mongoose 模块"></a>3. npm安装express + jade + mongoose 模块</h2><p>npm模块安装直接按上面介绍的方法安装即可，这里简单介绍下这三个模块：</p>
<h4 id="1-express"><a href="#1-express" class="headerlink" title="1.express"></a>1.express</h4><p>Express 是一个简洁而灵活的 node.js Web应用框架, 基于MVC架构，提供一系列强大特性帮助你创建各种Web应用。<br>（这就好像PHP有 YII thinkPHP 框架）安装 express 需要要 –g全局安装，便于在命令行里创建项目骨架。</p>
<h4 id="2-jade"><a href="#2-jade" class="headerlink" title="2.jade"></a>2.jade</h4><p>node下的模板引擎，可用于变量值输出和简化HTML代码，Express 框架默认使用的就是jade, 同类模板引擎有 Ejs Handlebars 可选，语法略有不同，可以按自己的编码喜欢好选择，这里推荐使用jade。<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/7.jpeg" alt=""></p>
<h4 id="3-mongoose"><a href="#3-mongoose" class="headerlink" title="3.mongoose"></a>3.mongoose</h4><p>Node.js下对MongoDB进行对像建模的工具，工作于异部环境下。方便创建集合模型、数据库连接、关闭，数据操作。与其它同类工具相比，它所提供的API灵活友好，（如果把mongoDB提供的原生接口比做js原生API。那么Mongoose就像jQuery。）同等工具有 MongoSkin，MongoLian，以及原生驱动 node-mongodb-native等。</p>
<p>以下是使用原生的MongoDB API 对比 Mongoose 实现通过id更新数据的功能。可以看出实现同样功能，Mongoose写出来的代码精简很多。<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/8.jpeg" alt=""></p>
<h2 id="4-Express初始化项目骨架，并在骨架上进行编码"><a href="#4-Express初始化项目骨架，并在骨架上进行编码" class="headerlink" title="4. Express初始化项目骨架，并在骨架上进行编码"></a>4. Express初始化项目骨架，并在骨架上进行编码</h2><p>上面3个模块成功安装后，项目所需的Node模块就齐了。接下来就是用Express生成项目骨架，并在骨架的基础上增加代码。</p>
<h3 id="4-1-生成项目骨架"><a href="#4-1-生成项目骨架" class="headerlink" title="4.1 生成项目骨架"></a>4.1 生成项目骨架</h3><p>直接在终端下敲入下面代码，express会自动生成项目的代码</p>
<blockquote>
<p>+—以下在终端下运行: ————————————————————+</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">express project-name</span></div></pre></td></tr></table></figure>
<p>运行后，express将自动生成如下文件夹及文件：<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/9.jpeg" alt=""></p>
<h3 id="4-2-项目骨架目录结构及文件介绍"><a href="#4-2-项目骨架目录结构及文件介绍" class="headerlink" title="4.2 项目骨架目录结构及文件介绍"></a>4.2 项目骨架目录结构及文件介绍</h3><ul>
<li>/public&nbsp; —— 图片、css、js等静态资源存放目录</li>
<li>/routes&nbsp; —— 路由 /views&nbsp; &nbsp;—— 模版 /app.js&nbsp; —— Web服务器</li>
</ul>
<h3 id="4-3-一个简单的例子-Express-MongoDB-读取数据库并做CRUD操作"><a href="#4-3-一个简单的例子-Express-MongoDB-读取数据库并做CRUD操作" class="headerlink" title="4.3 一个简单的例子 Express + MongoDB 读取数据库并做CRUD操作"></a>4.3 一个简单的例子 Express + MongoDB 读取数据库并做CRUD操作</h3><p>这是直接在express生成的项目骨架上进行编码的小Demo，代码非常简洁，有兴趣的同学可以下载源码在正地测试运行一下。<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/10.jpeg" alt=""><br>Demo地址：<a href="http://url.cn/Vn7owS" target="_blank" rel="external">http://url.cn/Vn7owS</a></p>
<h2 id="5-执行入口文件-node-app，并在浏览器下测试效果"><a href="#5-执行入口文件-node-app，并在浏览器下测试效果" class="headerlink" title="5. 执行入口文件 $node app，并在浏览器下测试效果"></a>5. 执行入口文件 $node app，并在浏览器下测试效果</h2><p>完成对项目的编码后，我们要在浏览器测试下对项目页面的效果及功能进行测试，有3个步骤：</p>
<ol>
<li>启动MongoDB服务（具休做法见上面的 2.4）</li>
<li>在项目目录下终端窗口下运行 $node app<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/11.jpg" alt=""></li>
<li>浏览器下输入 localhost:3001<br><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/12.jpg" alt=""><br>以上运行的是4.3提供的小demo项目(Simple Todo List)</li>
</ol>
<h2 id="6-部署到服务器上线"><a href="#6-部署到服务器上线" class="headerlink" title="6. 部署到服务器上线"></a>6. 部署到服务器上线</h2><p>项目编码完成并在本地测试无问题后，既可部署到服务器上，当时做“ideas需求管理系统Beta”服务器的部署是kaireewu部署的，有兴趣的同事可以私下骚扰，国内外支持 node.js的虚拟主机很多，可以从&nbsp;<a href="https://github.com/joyent/node/wiki/Node-Hosting" target="_blank" rel="external">node wiki主机列表</a>&nbsp;查询，但界面方便使用上，个人推荐以下3个：</p>
<ol>
<li>&nbsp;<a href="http://www.appfog.com" target="_blank" rel="external">appfog</a></li>
<li>&nbsp;<a href="https://www.nitrous.io/" target="_blank" rel="external">Nitrous.IO</a></li>
<li>&nbsp;<a href="https://www.openshift.com/" target="_blank" rel="external">openshift</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2013下半年在做中心【ideas需求管理系统】的Beta版本时，在当时缺乏开发人力的情况下，身兼多职，尝试用 Node.js+MongoDB来做平台的构建，由于当时也是第一次接触Express和MongoDB，平时日常的需求又狂轰乱炸，只能利用平时中午少撸一发“德玛西亚”的时间（小撸怡情，大撸伤身）及周未攒出来的宝贵时间，现学现用。系统在2013年下半年的11月份成功上线，供中心所有重构记录需求，生成周报，为【ideas需求管理系统】奠定基础。时及今日，给大家做下分享：&lt;br&gt; &lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 对于1个网页重构的同学，使用Node.js来做前后端构建是有一定优势的，因为你可以不用懂PHP，CGI等开发语言就可以一人搞定前后端，完成一套系统的编码构建，当然如果能懂一些自然最好，在解决一些服务器运维问题时，会更加有方向。当然您需要具备简单的Node.js安装，APP执行，读懂报错的能力，还有较好的 javascript编码能力。好吧，序章已经足够长了，下面开始，&lt;/p&gt;
&lt;p&gt;##【目录】构建一个Web 应用大概会有6大步骤&lt;br&gt; &lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/2.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-搭建node-js、npm环境&quot;&gt;&lt;a href=&quot;#1-搭建node-js、npm环境&quot; class=&quot;headerlink&quot; title=&quot;1. 搭建node.js、npm环境&quot;&gt;&lt;/a&gt;1. 搭建node.js、npm环境&lt;/h3&gt;&lt;p&gt; 提起node.js对于没有开发基础的同学来说，可能会有点排斥，觉得光搞定环境搭建及配置就够头痛的。其实现在的node.js在window环境下的安装已经不像2年前要先装个cybwin后再手动配window全局变量名那么麻烦，真心不难，直接官网下一个.exe文件，装完node.js及npm环境就已经齐了。So Easy!&amp;nbsp;下面介绍一个非常simple的小程序带你了解node和npm环境。&lt;/p&gt;
&lt;h4 id=&quot;1-1-确定官方的安装包装上后，确认上node和npm已经装上：&quot;&gt;&lt;a href=&quot;#1-1-确定官方的安装包装上后，确认上node和npm已经装上：&quot; class=&quot;headerlink&quot; title=&quot;1.1 确定官方的安装包装上后，确认上node和npm已经装上：&quot;&gt;&lt;/a&gt;1.1 确定官方的安装包装上后，确认上node和npm已经装上：&lt;/h4&gt;&lt;p&gt;终端下敲入&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;node -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm -v&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果有正常打印出类似的东东则成功&lt;br&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/node-mongodb/3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-2-以下是一个simple-node小程序&quot;&gt;&lt;a href=&quot;#1-2-以下是一个simple-node小程序&quot; class=&quot;headerlink&quot; title=&quot;1.2 以下是一个simple node小程序&quot;&gt;&lt;/a&gt;1.2 以下是一个simple node小程序&lt;/h4&gt;&lt;p&gt; 功能：在当前目录下生成一个 test.txt 的文本文件，并对此文件上填入文字 “Hello Node”.&lt;/p&gt;
    
    </summary>
    
    
      <category term="node,mongodb" scheme="http://iamsonic.net/tags/node-mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Grunt打造前端自动化工作流</title>
    <link href="http://iamsonic.net/2013/07/15/grunt-intro/"/>
    <id>http://iamsonic.net/2013/07/15/grunt-intro/</id>
    <published>2013-07-15T06:28:39.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/grunt-intro/grunt-1.jpg" alt="blog-img"></p>
<h2 id="Grunt这货是啥？"><a href="#Grunt这货是啥？" class="headerlink" title="Grunt这货是啥？"></a>Grunt这货是啥？</h2><p>最近很火的前端自动化小工具，基于任务的命令行构建工具 <a href="http://gruntjs.com" target="_blank" rel="external">http://gruntjs.com</a></p>
<p>&nbsp;</p>
<h2 id="Grunt能帮我们干啥？"><a href="#Grunt能帮我们干啥？" class="headerlink" title="Grunt能帮我们干啥？"></a>Grunt能帮我们干啥？</h2><h3 id="在开始介绍前，先向大家描述下面的场景"><a href="#在开始介绍前，先向大家描述下面的场景" class="headerlink" title="在开始介绍前，先向大家描述下面的场景:"></a>在开始介绍前，先向大家描述下面的场景:</h3><h4 id="【场景1：项目开始前】"><a href="#【场景1：项目开始前】" class="headerlink" title="【场景1：项目开始前】"></a>【场景1：项目开始前】</h4><ol>
<li>先建立一个 projA 的文件夹 再建 html css js images （建5个或以上文件夹，花费1分钟）</li>
<li>拷贝 CSS库（Yui Reset | bootstrap）JS库（Requiet.js | Seajs | jQuery | jQuery插件 ） 进相应目录（拷贝 N个文件，花费N分钟）</li>
<li>再新建 html/index.html js/comm.js css/base.css css/comm.css css/module-A.css …… （建N个文件，花费N分钟）</li>
</ol>
<h4 id="【场景2：编码中】"><a href="#【场景2：编码中】" class="headerlink" title="【场景2：编码中】"></a>【场景2：编码中】</h4><p>编辑器编码 =&gt; 切换到浏览器F5 =&gt; 编辑器编码 =&gt; 切换到浏览器F5 =&gt; 编辑器编码 =&gt; 切换到浏览器F5 =&gt; 编辑器编码 =&gt; 切换到浏览器F5 …………</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/grunt-intro/grunt-2.jpg" alt="F5按爆"></p>
<p>键盘就这样杯具了….</p>
<h4 id="【场景3：编码完成】"><a href="#【场景3：编码完成】" class="headerlink" title="【场景3：编码完成】"></a>【场景3：编码完成】</h4><ol>
<li>HTML去掉注析、换行符 - HtmlMin</li>
<li>CSS文件压缩合并 – CssMinify</li>
<li>JS代码风格检查 – JsHint</li>
<li>JS代码压缩 – Uglyfy</li>
<li>image压缩 - imagemin</li>
</ol>
<p>&nbsp;</p>
<p>在一个项目过程中，重复而枯燥的工作太多了…. <strong>绳命就这样浪费了。</strong></p>
<p>我们需要一个自动化的工作流程，让我们更专注于coding，而不是coding外的繁琐工作。于是Grunt应运而生。可以想像，如果在node环境下，一行命令搞定一个场景，So Cool…</p>
<p>&nbsp;</p>
<h2 id="Grunt安装配置"><a href="#Grunt安装配置" class="headerlink" title="Grunt安装配置"></a>Grunt安装配置</h2><h3 id="安装-grunt-cli"><a href="#安装-grunt-cli" class="headerlink" title="安装 grunt-cli"></a>安装 grunt-cli</h3><ol>
<li><ol>
<li>自备node环境(&gt;0.8.0), npm包管理</li>
</ol>
</li>
<li><ol>
<li>卸载旧版本grunt（&lt;0.4.0） (没装过请忽略)</li>
</ol>
<p>npm uninstall grunt -g`</p>
</li>
<li><p>安装grunt-cli</p>
<pre>`npm install grunt-cli -g`</pre>

<p>&nbsp;</p>
<h3 id="安装-grunt-init-可选"><a href="#安装-grunt-init-可选" class="headerlink" title="安装 grunt-init(可选)"></a>安装 grunt-init(可选)</h3><p><code>npm install grunt-init -g</code></p>
<p>可选安装，grunt-init是个脚手架工具，它可以帮你完成项目的自动化创建，包括项目的目录结构，每个目录里的文件等。具体情况要看你运行grunt-init指定的模板，以及创建过程中你对问题的回答。由于篇幅且配置 grunt-init 模板较为复杂，本章暂不展开讨论，有兴趣的童鞋可私下了解。</p>
<p>&nbsp;</p>
<h3 id="配置-grunt"><a href="#配置-grunt" class="headerlink" title="配置 grunt"></a>配置 grunt</h3><p>从官网下载package.json Gruntfile.js 文件放到项目根目录，并对文件进行修改配置.</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/grunt-intro/directory1.png" alt="Directory"></p>
</li>
</ol>
<ul>
<li><code>package.json</code> //项目自动化所依赖的相关插件。</li>
<li><p><code>Gruntfile.js</code> //项目自动化工作流配置文件，重要</p>
<p>&nbsp;</p>
<h4 id="1-package-json-文件修改-官方文件地址"><a href="#1-package-json-文件修改-官方文件地址" class="headerlink" title="1. package.json 文件修改 官方文件地址"></a>1. package.json 文件修改 <a href="http://gruntjs.com/getting-started#package.json" target="_blank" rel="external">官方文件地址</a></h4><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/grunt-intro/grunt-3.png" alt="package.json"></p>
<h4 id="2-Gruntfile-js-文件修改-官方文件地址"><a href="#2-Gruntfile-js-文件修改-官方文件地址" class="headerlink" title="2. Gruntfile.js 文件修改 官方文件地址"></a>2. Gruntfile.js 文件修改 <a href="http://gruntjs.com/getting-started#an-example-gruntfile" target="_blank" rel="external">官方文件地址</a></h4><p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/grunt-intro/grunt-4.png" alt="Gruntfile.js"></p>
<p>&nbsp;</p>
<h2 id="开始一个实例"><a href="#开始一个实例" class="headerlink" title="开始一个实例"></a>开始一个实例</h2><h3 id="这里以projA为例子，实现的自动化功能如下："><a href="#这里以projA为例子，实现的自动化功能如下：" class="headerlink" title="这里以projA为例子，实现的自动化功能如下："></a>这里以projA为例子，实现的自动化功能如下：</h3></li>
<li><p>编码过程中自动监控projA目录，如果 .html/ .css/ .js文件变更时，自动刷新浏览器。</p>
</li>
<li><p>编码完成后，压缩html、css、js、img文件,并存放到dist/目录下。</p>
<p><img src="http://iamsonic-1253772978.cosgz.myqcloud.com/blog/grunt-intro/grunt-5.png" alt="Directory"></p>
<p>&nbsp;</p>
<h3 id="对应的操作步骤如下："><a href="#对应的操作步骤如下：" class="headerlink" title="对应的操作步骤如下："></a>对应的操作步骤如下：</h3></li>
</ul>
<ol>
<li><ol>
<li>先配置好package.json、Gruntfile.js两个文件，<a href="http://share.weiyun.com/68d8de76b4c09f7c8afab92e0de87cf4" target="_blank" rel="external">projA文件打包下载
</a></li>
</ol>
</li>
<li><ol>
<li>执行命令自动下载相对应的Grunt插件<a href="http://dwz.cn/9b8lk" target="_blank" rel="external">【视频演示戳这里】</a><br><strong>命令行执行:</strong><pre>`npm install`</pre></li>
</ol>
</li>
<li><ol>
<li>启动文件变更监控(livereload)<a href="http://dwz.cn/9b8pJ" target="_blank" rel="external">【视频演示戳这里】</a><br><strong>命令行执行:</strong><pre>`grunt live`</pre></li>
</ol>
</li>
<li><ol>
<li>编码完成后Build<a href="http://dwz.cn/9b8yw" target="_blank" rel="external">【视频演示戳这里】</a><br><strong>命令行执行:</strong><br><pre>`grunt build</pre></li>
</ol>
</li>
</ol>
<p>&nbsp;</p>
<h2 id="Grunt使用总结"><a href="#Grunt使用总结" class="headerlink" title="Grunt使用总结"></a>Grunt使用总结</h2><ol>
<li>配置简单，配置文件Gruntfile.js是JS格式，比较贴近前端知识点。相对Ant之类基于JAVA,又是xml配置，相对来说学习成本低。</li>
<li>Grunt能为我们做的远不只这么多,很多Grunt插件待我们去挖掘使用。<blockquote>
<p>比如：haml less coffeeScript dataURI html2json</p>
</blockquote>
</li>
<li>每个人的具体需求不一样，可以按自己的习惯合理配置，组合成最适合自己的自动化工作流。</li>
<li>Grunt团队很勤劳，社区活跃，有兴趣可以持续关注。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://iamsonic-1253772978.cosgz.myqcloud.com/blog/grunt-intro/grunt-1.jpg&quot; alt=&quot;blog-img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Grunt这货是啥？&quot;&gt;&lt;a href=&quot;#Grunt这货是啥？&quot; class=&quot;headerlink&quot; title=&quot;Grunt这货是啥？&quot;&gt;&lt;/a&gt;Grunt这货是啥？&lt;/h2&gt;&lt;p&gt;最近很火的前端自动化小工具，基于任务的命令行构建工具 &lt;a href=&quot;http://gruntjs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gruntjs.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;Grunt能帮我们干啥？&quot;&gt;&lt;a href=&quot;#Grunt能帮我们干啥？&quot; class=&quot;headerlink&quot; title=&quot;Grunt能帮我们干啥？&quot;&gt;&lt;/a&gt;Grunt能帮我们干啥？&lt;/h2&gt;&lt;h3 id=&quot;在开始介绍前，先向大家描述下面的场景&quot;&gt;&lt;a href=&quot;#在开始介绍前，先向大家描述下面的场景&quot; class=&quot;headerlink&quot; title=&quot;在开始介绍前，先向大家描述下面的场景:&quot;&gt;&lt;/a&gt;在开始介绍前，先向大家描述下面的场景:&lt;/h3&gt;&lt;h4 id=&quot;【场景1：项目开始前】&quot;&gt;&lt;a href=&quot;#【场景1：项目开始前】&quot; class=&quot;headerlink&quot; title=&quot;【场景1：项目开始前】&quot;&gt;&lt;/a&gt;【场景1：项目开始前】&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;先建立一个 projA 的文件夹 再建 html css js images （建5个或以上文件夹，花费1分钟）&lt;/li&gt;
&lt;li&gt;拷贝 CSS库（Yui Reset | bootstrap）JS库（Requiet.js | Seajs | jQuery | jQuery插件 ） 进相应目录（拷贝 N个文件，花费N分钟）&lt;/li&gt;
&lt;li&gt;再新建 html/index.html js/comm.js css/base.css css/comm.css css/module-A.css …… （建N个文件，花费N分钟）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;【场景2：编码中】&quot;&gt;&lt;a href=&quot;#【场景2：编码中】&quot; class=&quot;headerlink&quot; title=&quot;【场景2：编码中】&quot;&gt;&lt;/a&gt;【场景2：编码中】&lt;/h4&gt;&lt;p&gt;编辑器编码 =&amp;gt; 切换到浏览器F5 =&amp;gt; 编辑器编码 =&amp;gt; 切换到浏览器F5 =&amp;gt; 编辑器编码 =&amp;gt; 切换到浏览器F5 =&amp;gt; 编辑器编码 =&amp;gt; 切换到浏览器F5 …………&lt;/p&gt;
    
    </summary>
    
    
      <category term="grunt" scheme="http://iamsonic.net/tags/grunt/"/>
    
  </entry>
  
  <entry>
    <title>富兰克林的十三种品德</title>
    <link href="http://iamsonic.net/2012/09/09/franklin-13/"/>
    <id>http://iamsonic.net/2012/09/09/franklin-13/</id>
    <published>2012-09-09T06:33:28.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转给自已，铭记与自勉"><a href="#转给自已，铭记与自勉" class="headerlink" title="转给自已，铭记与自勉"></a>转给自已，铭记与自勉</h3><blockquote>
<p>一、节制：食不过饱，酒不过量。<br>⑴Temperance: Eat not too dullness; drink not too elevation.</p>
<p>二、缄默：避免空谈，言必对己或对人有益。<br>⑵Silence: Speak not but what may benefit others or yourself; avoid trifling conversation.</p>
<p>三、秩序：放东西的地方，做事情的时间要心中有数。<br> ⑶Order: Let all your things have their places; let each part of your business have its time.</p>
<p>四、决心：该做的一定要做，做就要做好。<br>⑷Resolution: Resolve to perform what you ought; perform without fail what you resolve.</p>
<p>五、节俭：对人或对己有益才可用钱，决不浪费。<br>⑸Frugality: Make no expense but to do good to others or yourself; i.e.,waste nothing.</p>
<p>六、勤奋：珍惜光阴，做有益之事，避无谓之举。<br>⑹Industry: Lose no time; be always employ’d in something useful; cut off all unnecessary actions.</p>
<p>七、真诚：不欺骗，有良知，为人厚道，说话实在。<br>⑺Sincerity: Use no hurtful deceit; think innocently and justly,and,if you speak,speak accordingly</p>
<p>八、正义：不做不利于人的事，不逃避自己的义务。<br>⑻Justice: Wrong none by doing injuries,or omitting the benefits that are your duty.</p>
<p>九、中庸：避免走极端，容忍别人给你的伤害，认为是你应该承受之事。<br>⑼Moderation: Avoid extreams; forbear resenting injuries so much as you think they deserve.</p>
<p>十、整洁：保持身体、衣服和住所的整洁。<br>⑽Cleanliness: Tolerate no uncleanliness in body,cloaths,or habitation</p>
<p>十一、冷静：不因小事，寻常之事，不可避免之事而慌乱。<br>⑾Tranquility: Be not distuibed at trifles,or at accidents common or unavoidable.</p>
<p>十二、节欲：少行房事，除非考虑到身体健康或者延续子嗣；不要房事过度，伤害身体或者损害自己或他人的安宁与名誉。<br>⑿Chastity: Rarely use venery but for health or offspring,never to dulness,weakness,or the injury of your own or another’s peace or reputation.</p>
<p>十三、谦逊：效法耶酥和苏格拉底。<br>⒀Humility: Imitate Jesus and Socrates</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;转给自已，铭记与自勉&quot;&gt;&lt;a href=&quot;#转给自已，铭记与自勉&quot; class=&quot;headerlink&quot; title=&quot;转给自已，铭记与自勉&quot;&gt;&lt;/a&gt;转给自已，铭记与自勉&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一、节制：食不过饱，酒不过量。&lt;br&gt;⑴Temperance: Eat not too dullness; drink not too elevation.&lt;/p&gt;
&lt;p&gt;二、缄默：避免空谈，言必对己或对人有益。&lt;br&gt;⑵Silence: Speak not but what may benefit others or yourself; avoid trifling conversation.&lt;/p&gt;
&lt;p&gt;三、秩序：放东西的地方，做事情的时间要心中有数。&lt;br&gt; ⑶Order: Let all your things have their places; let each part of your business have its time.&lt;/p&gt;
&lt;p&gt;四、决心：该做的一定要做，做就要做好。&lt;br&gt;⑷Resolution: Resolve to perform what you ought; perform without fail what you resolve.&lt;/p&gt;
&lt;p&gt;五、节俭：对人或对己有益才可用钱，决不浪费。&lt;br&gt;⑸Frugality: Make no expense but to do good to others or yourself; i.e.,waste nothing.&lt;/p&gt;
&lt;p&gt;六、勤奋：珍惜光阴，做有益之事，避无谓之举。&lt;br&gt;⑹Industry: Lose no time; be always employ’d in something useful; cut off all unnecessary actions.&lt;/p&gt;
&lt;p&gt;七、真诚：不欺骗，有良知，为人厚道，说话实在。&lt;br&gt;⑺Sincerity: Use no hurtful deceit; think innocently and justly,and,if you speak,speak accordingly&lt;/p&gt;
&lt;p&gt;八、正义：不做不利于人的事，不逃避自己的义务。&lt;br&gt;⑻Justice: Wrong none by doing injuries,or omitting the benefits that are your duty.&lt;/p&gt;
&lt;p&gt;九、中庸：避免走极端，容忍别人给你的伤害，认为是你应该承受之事。&lt;br&gt;⑼Moderation: Avoid extreams; forbear resenting injuries so much as you think they deserve.&lt;/p&gt;
&lt;p&gt;十、整洁：保持身体、衣服和住所的整洁。&lt;br&gt;⑽Cleanliness: Tolerate no uncleanliness in body,cloaths,or habitation&lt;/p&gt;
&lt;p&gt;十一、冷静：不因小事，寻常之事，不可避免之事而慌乱。&lt;br&gt;⑾Tranquility: Be not distuibed at trifles,or at accidents common or unavoidable.&lt;/p&gt;
&lt;p&gt;十二、节欲：少行房事，除非考虑到身体健康或者延续子嗣；不要房事过度，伤害身体或者损害自己或他人的安宁与名誉。&lt;br&gt;⑿Chastity: Rarely use venery but for health or offspring,never to dulness,weakness,or the injury of your own or another’s peace or reputation.&lt;/p&gt;
&lt;p&gt;十三、谦逊：效法耶酥和苏格拉底。&lt;br&gt;⒀Humility: Imitate Jesus and Socrates&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ie hack在某些CSS属性下失效</title>
    <link href="http://iamsonic.net/2011/06/30/ie-hack-fail/"/>
    <id>http://iamsonic.net/2011/06/30/ie-hack-fail/</id>
    <published>2011-06-30T06:32:35.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目碰到一个问题，要在CSS里用IE hack取分使用的字体。在IE6-9浏览器下使用宋体，ie9/FF/Safari 使用雅黑字体。按理来讲应该这样写:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-family</span><span class="selector-pseudo">:Microsoft</span> <span class="selector-tag">YaHei</span>, <span class="selector-tag">YouYuan</span>;</div><div class="line"><span class="selector-tag">font-family</span><span class="selector-pseudo">:Arial</span>\9; <span class="comment">/* targets ie9 and below*/</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>关于IE Hack可以参考<a href="http://t.qq.com/feiwen8772" target="_blank" rel="external">@码头兄</a>的 <a href="http://www.css88.com/archives/3746" title="IE9的css hack" target="_blank" rel="external">IE9的css hack</a> ）</p>
</blockquote>
<p> 结果却是所有游览器都使用了”Arial”字体,也就是说这个”\9″ 的hack失效了，请教了几位同行均没能解决这个问题，有建议用<a href="http://davidbcalhoun.com/tag/ie-hack" target="_blank" rel="external">条件注释</a><br> 的方式，虽然这是一种趋势，往后的页面都会逐渐采用这种方法来做!但这也暴露了css hack在某下CSS属性下会失效这个事实。<br> 于是搜索了一下，找到国外这篇<a href="http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-how-to-target-ie6-ie7-and-ie8-uniquely-with-4-characters/" target="_blank" rel="external">Quick Tip: How to Target IE6, IE7, and IE8 Uniquely with 4 Characters</a><br> 里面的论坛也有人遇到的一样的问题!</p>
<p> 使用”\9″对某些css属性作品失效时，要增加<br> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">**</div><div class="line"> “/!important”</div><div class="line">**</div></pre></td></tr></table></figure></p>
<p>经测试发现，这个方法能解决ie6-8,唯独ie9依然不行，试过对字体加””,修改/!important的位置，都不行，如果有解决ie9的方法。欢迎讨论!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目碰到一个问题，要在CSS里用IE hack取分使用的字体。在IE6-9浏览器下使用宋体，ie9/FF/Safari 使用雅黑字体。按理来讲应该这样写:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:Microsoft&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;YaHei&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;YouYuan&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:Arial&lt;/span&gt;\9; &lt;span class=&quot;comment&quot;&gt;/* targets ie9 and below*/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于IE Hack可以参考&lt;a href=&quot;http://t.qq.com/feiwen8772&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@码头兄&lt;/a&gt;的 &lt;a href=&quot;http://www.css88.com/archives/3746&quot; title=&quot;IE9的css hack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IE9的css hack&lt;/a&gt; ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 结果却是所有游览器都使用了”Arial”字体,也就是说这个”\9″ 的hack失效了，请教了几位同行均没能解决这个问题，有建议用&lt;a href=&quot;http://davidbcalhoun.com/tag/ie-hack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;条件注释&lt;/a&gt;&lt;br&gt; 的方式，虽然这是一种趋势，往后的页面都会逐渐采用这种方法来做!但这也暴露了css hack在某下CSS属性下会失效这个事实。&lt;br&gt; 于是搜索了一下，找到国外这篇&lt;a href=&quot;http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-how-to-target-ie6-ie7-and-ie8-uniquely-with-4-characters/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quick Tip: How to Target IE6, IE7, and IE8 Uniquely with 4 Characters&lt;/a&gt;&lt;br&gt; 里面的论坛也有人遇到的一样的问题!&lt;/p&gt;
&lt;p&gt; 使用”\9″对某些css属性作品失效时，要增加&lt;br&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; “/!important”&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;**&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;经测试发现，这个方法能解决ie6-8,唯独ie9依然不行，试过对字体加””,修改/!important的位置，都不行，如果有解决ie9的方法。欢迎讨论!&lt;/p&gt;

    
    </summary>
    
    
      <category term="ie, font-family" scheme="http://iamsonic.net/tags/ie-font-family/"/>
    
  </entry>
  
  <entry>
    <title>回家接老婆儿子咯</title>
    <link href="http://iamsonic.net/2011/04/01/take-wife-son/"/>
    <id>http://iamsonic.net/2011/04/01/take-wife-son/</id>
    <published>2011-04-01T15:05:36.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>久别近两个月，后天就要回老婆家接她们母子回广州咯。期待。。。</p>
<p>这几天晚上睡觉发梦都老是梦到她们两个，分开这么长时间。宝宝现在都快半岁大了，会用手去抓东西，会认人了。希望回去不要不认得老爸喔。此时此刻，归心似箭阿。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;久别近两个月，后天就要回老婆家接她们母子回广州咯。期待。。。&lt;/p&gt;
&lt;p&gt;这几天晚上睡觉发梦都老是梦到她们两个，分开这么长时间。宝宝现在都快半岁大了，会用手去抓东西，会认人了。希望回去不要不认得老爸喔。此时此刻，归心似箭阿。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>夜半，点烟抽寂寞</title>
    <link href="http://iamsonic.net/2011/03/22/smoking-year/"/>
    <id>http://iamsonic.net/2011/03/22/smoking-year/</id>
    <published>2011-03-22T15:04:48.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉地，也是12年的老烟民了。</p>
<p>那是个叛逆的年龄，高中的时候，受损友引诱，这东西一拿起来，就没停过手，最初的那个损友A，5年前已经成功戒掉。刚开始的时候，很排斥。清楚的记得，看到朋友A拿烟抽的时候，我的第一感觉是，这是什么人阿？还抽烟，我怎么会与这样的不良少年为友。后来在他的引诱下，身边几个要好的朋友都被拉下水了。而我也跟着悲剧了。。。</p>
<p>尼古丁底是怎么样的感觉，我也难形容，确实是毒药，而且心瘾难戒。戒过几次，最长一次也维持只是3个月而已，记得那个时候，老婆对我说，你居然可以3个月不抽，真不容易阿。那你人生还有什么乐趣？当时，我真的无言以对。确实，工作后，我几乎没有什么爱好。球也没踢了。游戏也没玩了。电影电视剧也少看了，除了工作真的很少户外的活动。或者我的圈子太窄了。。。抽烟也就是我现在唯一的小爱好了。其实我抽得并不多，量控制得很好，一天不超5根，如果有时有应酬，另当别论。现在抽烟的时候更多的是在饭后，无聊时打发时间。</p>
<p>有人说，戒烟最关键是，要下足够的决心，我觉得这只对一半。另外一半，我觉得是理由，每个人戒烟都有他的理由，可能是家人强烈反对，可能是考虑到要繁育后代，可能是由于身体的原因。理由就好像事情一件事或者一个项目的蓝图，而决心，就是实现这个蓝图的执行力。缺一不可。如果能给我一个好的蓝图，我能做到。你呢？</p>
<blockquote>
<p>后记：2015年，在阅读完《<a href="https://book.douban.com/subject/3318174/" target="_blank" rel="external">这书能让你戒烟</a>》后，成功戒除16年的烟，并推荐给身边的同事朋友，并且帮忙他们成功戒烟。如果想戒烟又还在徘徊给自己找理由和决心的朋友，推荐阅读！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉地，也是12年的老烟民了。&lt;/p&gt;
&lt;p&gt;那是个叛逆的年龄，高中的时候，受损友引诱，这东西一拿起来，就没停过手，最初的那个损友A，5年前已经成功戒掉。刚开始的时候，很排斥。清楚的记得，看到朋友A拿烟抽的时候，我的第一感觉是，这是什么人阿？还抽烟，我怎么会与这样的不良少年为友。后来在他的引诱下，身边几个要好的朋友都被拉下水了。而我也跟着悲剧了。。。&lt;/p&gt;
&lt;p&gt;尼古丁底是怎么样的感觉，我也难形容，确实是毒药，而且心瘾难戒。戒过几次，最长一次也维持只是3个月而已，记得那个时候，老婆对我说，你居然可以3个月不抽，真不容易阿。那你人生还有什么乐趣？当时，我真的无言以对。确实，工作后，我几乎没有什么爱好。球也没踢了。游戏也没玩了。电影电视剧也少看了，除了工作真的很少户外的活动。或者我的圈子太窄了。。。抽烟也就是我现在唯一的小爱好了。其实我抽得并不多，量控制得很好，一天不超5根，如果有时有应酬，另当别论。现在抽烟的时候更多的是在饭后，无聊时打发时间。&lt;/p&gt;
&lt;p&gt;有人说，戒烟最关键是，要下足够的决心，我觉得这只对一半。另外一半，我觉得是理由，每个人戒烟都有他的理由，可能是家人强烈反对，可能是考虑到要繁育后代，可能是由于身体的原因。理由就好像事情一件事或者一个项目的蓝图，而决心，就是实现这个蓝图的执行力。缺一不可。如果能给我一个好的蓝图，我能做到。你呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后记：2015年，在阅读完《&lt;a href=&quot;https://book.douban.com/subject/3318174/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这书能让你戒烟&lt;/a&gt;》后，成功戒除16年的烟，并推荐给身边的同事朋友，并且帮忙他们成功戒烟。如果想戒烟又还在徘徊给自己找理由和决心的朋友，推荐阅读！&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>亲身经历超市抢“盐”风波</title>
    <link href="http://iamsonic.net/2011/03/17/grab-salt/"/>
    <id>http://iamsonic.net/2011/03/17/grab-salt/</id>
    <published>2011-03-17T13:23:47.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>日本的大地震，福岛的核泄露，再一次让中国人恐慌。前阵日本牛奶全城抢购，再到电子零件涨价，再到盐产品被波及，没完没了…</p>
<p>昨天晚上外出归来，路过婴儿店，本想为宝宝买几包好的尿片，家里的快用完了，到店里被告知日本产“花王”尿片全部短货，心想，日本奶粉被抢断货也就算了，日本尿片也没有了。没办法，小日本的产品就是好，用过就知道。沮丧之极，回到家中。又接到亲人电话，问楼下周围边还能买到盐吗？赶快去买，现在很多地方都在抢。我问为什么盐会买不到？“原来怕受日本福岛核心电站放射性物质波及，海水扩散时物质被飘移到中国沿海，到时海产盐就会有大量的放射性物质遗留在里面，食用会对身体造成危害。最好先屯积一年左右的食盐量。老家现在市面上都买不到了盐。”当时听了我就在想，就算有危害，盐产品出产时都会质量审核，不至于要先屯积一年的量了，电话里也没多说，我决定去楼下超市看看这边是不是也没有盐卖了。出门前我看了一下家里盐剩下半包了，如果超市有得卖，就先买几包放着。</p>
<p>去到超市才发现，架上的盐被一抄而空，排队埋单的人都是10包20包的买。更有人是整箱地拿。原本以为买不到了，再一次沮丧要回时，刚好超市有人又推了几箱盐出来，好多人冲上去抢。我也顺着人流，拿了5包。还算顺利，本来打包就埋单走人了，又接到电话，说现在家里连酱油都没有了，能买到盐就买多几包，自己留着也好，到时别人需要也好，都还能用得上。最后买了10包回来。 </p>
<p>回来家里上网搜索才知道，盐的事件在网上砸开了锅。我发现对于这个事件的评论者更多的是那些没有去抢购或者抢购不到者，听到最多的词是“没文化，真可怕”“脑残”“傻B”“无知”之类的。看来我也当了回无知者，但仔细想想是这样子的吗？我更多的是发现自已现在的思维方法跟以前不同。如果我还是一个单身汉，一人吃饱全家饱，家里不用自己煮饭，也不用跟柴木油盐过日子，可能我也随着网上的叫骂者一样，微博上骂上几句。但是现在不一样，有家庭，有孩子。你不用吃可以，但你的家人不用吃吗？你的亲人不用吃吗？你上有老，下有小，一家3口，两边父母，不是你不需要大家就跟着你不需要，更多的时候，你要考虑到家人。</p>
<p>在微博上还看到一女的开车去抢了7箱盐，评论骂声一片。对于这样的人，我也不多做评论，如果她也是为了自己的家人亲戚朋友做考虑，我是完全可以理解。</p>
<p>像牛奶、食品现在国人都不放心，这类很多是私营企业的产品，而像盐这类由国家供应的产品，国人也依然对其质量不放心，确实是需要我们社会深思的阿！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日本的大地震，福岛的核泄露，再一次让中国人恐慌。前阵日本牛奶全城抢购，再到电子零件涨价，再到盐产品被波及，没完没了…&lt;/p&gt;
&lt;p&gt;昨天晚上外出归来，路过婴儿店，本想为宝宝买几包好的尿片，家里的快用完了，到店里被告知日本产“花王”尿片全部短货，心想，日本奶粉被抢断货也就算了，日本尿片也没有了。没办法，小日本的产品就是好，用过就知道。沮丧之极，回到家中。又接到亲人电话，问楼下周围边还能买到盐吗？赶快去买，现在很多地方都在抢。我问为什么盐会买不到？“原来怕受日本福岛核心电站放射性物质波及，海水扩散时物质被飘移到中国沿海，到时海产盐就会有大量的放射性物质遗留在里面，食用会对身体造成危害。最好先屯积一年左右的食盐量。老家现在市面上都买不到了盐。”当时听了我就在想，就算有危害，盐产品出产时都会质量审核，不至于要先屯积一年的量了，电话里也没多说，我决定去楼下超市看看这边是不是也没有盐卖了。出门前我看了一下家里盐剩下半包了，如果超市有得卖，就先买几包放着。&lt;/p&gt;
&lt;p&gt;去到超市才发现，架上的盐被一抄而空，排队埋单的人都是10包20包的买。更有人是整箱地拿。原本以为买不到了，再一次沮丧要回时，刚好超市有人又推了几箱盐出来，好多人冲上去抢。我也顺着人流，拿了5包。还算顺利，本来打包就埋单走人了，又接到电话，说现在家里连酱油都没有了，能买到盐就买多几包，自己留着也好，到时别人需要也好，都还能用得上。最后买了10包回来。 &lt;/p&gt;
&lt;p&gt;回来家里上网搜索才知道，盐的事件在网上砸开了锅。我发现对于这个事件的评论者更多的是那些没有去抢购或者抢购不到者，听到最多的词是“没文化，真可怕”“脑残”“傻B”“无知”之类的。看来我也当了回无知者，但仔细想想是这样子的吗？我更多的是发现自已现在的思维方法跟以前不同。如果我还是一个单身汉，一人吃饱全家饱，家里不用自己煮饭，也不用跟柴木油盐过日子，可能我也随着网上的叫骂者一样，微博上骂上几句。但是现在不一样，有家庭，有孩子。你不用吃可以，但你的家人不用吃吗？你的亲人不用吃吗？你上有老，下有小，一家3口，两边父母，不是你不需要大家就跟着你不需要，更多的时候，你要考虑到家人。&lt;/p&gt;
&lt;p&gt;在微博上还看到一女的开车去抢了7箱盐，评论骂声一片。对于这样的人，我也不多做评论，如果她也是为了自己的家人亲戚朋友做考虑，我是完全可以理解。&lt;/p&gt;
&lt;p&gt;像牛奶、食品现在国人都不放心，这类很多是私营企业的产品，而像盐这类由国家供应的产品，国人也依然对其质量不放心，确实是需要我们社会深思的阿！&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客是IT人的标配？</title>
    <link href="http://iamsonic.net/2011/03/15/need-blog/"/>
    <id>http://iamsonic.net/2011/03/15/need-blog/</id>
    <published>2011-03-15T12:22:30.000Z</published>
    <updated>2017-05-26T08:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>身边的同行、朋友问及我有没有自己的博客，答曰：”无”！马上投来异样的眼光。似乎很不可思议，难道IT人就必须有自己的博客吗？</p>
<p>05年博客开始 流行的时候，偶也潮了一回，用LBS搭建了一个人的博客。刚开始主要发布一些牛B的，好看转贴，极少原创，也有一些私人的记录。渐渐地，我发现博客几乎都没有流量，评论倒是很多，但都是些推广的垃圾评论。缺乏交流，由于耐不住寂寞，最终服务器到期时数据全部丢失了博客也就关闭了。</p>
<p>其实个人博客能否走得长远，个人认为最重要有几个条件，1.有投资回报的 2.有交流氛围的 3.兴趣的 。这里说的回报，可以是金钱的回报，也可以是个人名利人脉的回报。所谓近朱者赤，近墨者黑，身边圈子的人如果都没有这个习惯，就失去了交流的意义，你也就没有这个慾望继续写下去，前2点是最重要的，单靠兴趣一个个人博客走不远。</p>
<p>其实做为一个IT人，拥有一个博客并长期坚持写作记录，是一个非常好的习惯，一个原创博客，可以结朋识友，并记录自己的成长。久不久回头看看以前的自己是怎样的思考，更清楚的认识自己。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;身边的同行、朋友问及我有没有自己的博客，答曰：”无”！马上投来异样的眼光。似乎很不可思议，难道IT人就必须有自己的博客吗？&lt;/p&gt;
&lt;p&gt;05年博客开始 流行的时候，偶也潮了一回，用LBS搭建了一个人的博客。刚开始主要发布一些牛B的，好看转贴，极少原创，也有一些私人的记录。渐渐地，我发现博客几乎都没有流量，评论倒是很多，但都是些推广的垃圾评论。缺乏交流，由于耐不住寂寞，最终服务器到期时数据全部丢失了博客也就关闭了。&lt;/p&gt;
&lt;p&gt;其实个人博客能否走得长远，个人认为最重要有几个条件，1.有投资回报的 2.有交流氛围的 3.兴趣的 。这里说的回报，可以是金钱的回报，也可以是个人名利人脉的回报。所谓近朱者赤，近墨者黑，身边圈子的人如果都没有这个习惯，就失去了交流的意义，你也就没有这个慾望继续写下去，前2点是最重要的，单靠兴趣一个个人博客走不远。&lt;/p&gt;
&lt;p&gt;其实做为一个IT人，拥有一个博客并长期坚持写作记录，是一个非常好的习惯，一个原创博客，可以结朋识友，并记录自己的成长。久不久回头看看以前的自己是怎样的思考，更清楚的认识自己。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
