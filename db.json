{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-prontera/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-prontera/source/css/prontera.css","path":"css/prontera.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-prontera/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-prontera/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-prontera/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-prontera/source/images/github.svg","path":"images/github.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-prontera/source/images/rss.svg","path":"images/rss.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-prontera/source/images/zhihu.svg","path":"images/zhihu.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-prontera/source/scss/prontera.scss","path":"scss/prontera.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-prontera/source/script/libs/jquery-3.1.1.min.js","path":"script/libs/jquery-3.1.1.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3cd863a26a0c4e63f9430ba953177add2f9ed6b8","modified":1495434264000},{"_id":"themes/hexo-theme-prontera/.DS_Store","hash":"c3157b0f707fedad23a625b101518c5523e1942a","modified":1495434264000},{"_id":"themes/hexo-theme-prontera/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/LICENSE","hash":"9a2271b00258a05e51b0196cf82d37fb094157fd","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/README.md","hash":"3ee0fe47ed38cabc1e82c454956e374ce2afb734","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/_config.yml","hash":"5e8745d4039560bdce5d09f32f519da40d9e3136","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/package.json","hash":"d17ed1bc6379cbbb9a748be5daf7689236770609","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/doc/en.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/doc/zh-cn.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495437132000},{"_id":"source/_posts/new-blog.md","hash":"2cbea1ada7a50c7e3270d0ea5caae733dd9f5af4","modified":1495437132000},{"_id":"source/_posts/new-gulp4.md","hash":"32d8a410819e0fcd082d0308fa517ecb993609fd","modified":1495437132000},{"_id":"source/about/index.md","hash":"b9bd254e2d6a83e226f9f9565892202c9164df02","modified":1495264538000},{"_id":"themes/hexo-theme-prontera/languages/en.yml","hash":"055f9ce2e3bdae98bf406e29d1530f440d264fc9","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/languages/zh-cn.yml","hash":"4573f9c7e5d07ab3c8f750f943e07adbf24bd7be","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/index.jade","hash":"f2fe7c860647d9944f9c2f8631fe151b6aa9a482","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/post.jade","hash":"fa8c235f899330e4e93f324542d428bedcd3c838","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/favicon.ico","hash":"22b8caf66bf4ecee4e1c55ae3cc60e37e328905d","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/mixins/post.jade","hash":"aa282c996bba8b870edf59c5c40c9e4e8c13473e","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/partial/comment.jade","hash":"d389129988fcfa1b182c1a57b6223a6292cfface","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/partial/copyright.jade","hash":"7ecb70869085711f624d956cb945a8a3cc7d4eeb","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/partial/head.jade","hash":"93bacce292ea456bcb48f5d3c245723bf14ef252","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/partial/layout.jade","hash":"4cf06a820b3c4741ddc10cbb9d3497df01f3eaa6","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/partial/nav.jade","hash":"2bef0d1e79bb4682b5c20303e9c39fb22279f1d3","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/partial/scripts.jade","hash":"5693887b4a28cfaf45cb5a2aab25ac79086e2c88","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/layout/partial/sidebar.jade","hash":"45c031238fa3e8496bc5db94519759b829f40ffd","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/css/prontera.css","hash":"8871a56398cb7c305570b495a77f2ae76a61d6ec","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/images/avatar.png","hash":"cf4148f11fdca3e98fc05c1467d133fddd29e6f7","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/images/github.svg","hash":"298722cbcd38d2ff55d3579641cde357f23bf3a9","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/images/rss.svg","hash":"2f02c29c0a167102f58b823c14b69172d13aed2e","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/images/zhihu.svg","hash":"4fbb4af95c907174ea8a01f98e0d4f4e41e93c3b","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/prontera.scss","hash":"170fe21f312fdf50b34100b447774ae38127d329","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/archive-post-list.scss","hash":"4d5788bb61437884219f8f735cbf47eaf185046f","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/base.scss","hash":"0810d50c0dedbabccd8e8b80b7291b9494760de0","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/footer.scss","hash":"114ed8db139f05b2e13f15cad5e14a42e0a428d8","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/header.scss","hash":"69cae95daf42e7fb15d87c96223ab9040e771640","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/home-post-list.scss","hash":"0fd1431d99c59b12ef2c7bd51151b8e7e8538a1c","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/mq.scss","hash":"dda9375a1fc419b57f5c3dab3d6ad7756581c2a8","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/post.scss","hash":"7663c6e5277911dd943871ceae5c51766c7191f3","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/scss/_partial/sidebar.scss","hash":"56627eb84817f1e3a1f63e9a0519d15bd91aac7c","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/doc/image/snapshot.png","hash":"9fbd6bd7648ccd3fc3a6ad4c46f451f434d32c3f","modified":1495437132000},{"_id":"themes/hexo-theme-prontera/source/script/libs/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1495437132000},{"_id":"public/atom.xml","hash":"76a201624aa9e22e654a99b560dd15f124631fdb","modified":1495437159063},{"_id":"public/about/index.html","hash":"d12ab582d030bc2c70943dac1025b8c61cf22ca6","modified":1495437159068},{"_id":"public/2017/05/20/new-blog/index.html","hash":"61368d2ac5907ed3616223956a412d46a1ad2511","modified":1495437159068},{"_id":"public/archives/index.html","hash":"647ef6b5de3efdbc1dfcedb1aee25eaef74821dd","modified":1495437159069},{"_id":"public/archives/2016/index.html","hash":"fc9aa848e506f5b0ba52d2a5aa7656479a5e5f2b","modified":1495437159069},{"_id":"public/archives/2016/03/index.html","hash":"fc9aa848e506f5b0ba52d2a5aa7656479a5e5f2b","modified":1495437159070},{"_id":"public/archives/2017/index.html","hash":"04381bf29d6bc1b182d25acd59ad4c67fbf074a4","modified":1495437159070},{"_id":"public/archives/2017/05/index.html","hash":"04381bf29d6bc1b182d25acd59ad4c67fbf074a4","modified":1495437159070},{"_id":"public/index.html","hash":"4aa35ce7b06803a0c7b82cffa98058ec91fc534d","modified":1495437159070},{"_id":"public/2016/03/10/new-gulp4/index.html","hash":"c8d0721cc55496748f27d9ff27e52874f3894537","modified":1495437159070},{"_id":"public/favicon.ico","hash":"22b8caf66bf4ecee4e1c55ae3cc60e37e328905d","modified":1495437159074},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1495437159074},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1495437159074},{"_id":"public/images/avatar.png","hash":"cf4148f11fdca3e98fc05c1467d133fddd29e6f7","modified":1495437159075},{"_id":"public/images/github.svg","hash":"298722cbcd38d2ff55d3579641cde357f23bf3a9","modified":1495437159075},{"_id":"public/images/rss.svg","hash":"2f02c29c0a167102f58b823c14b69172d13aed2e","modified":1495437159075},{"_id":"public/images/zhihu.svg","hash":"4fbb4af95c907174ea8a01f98e0d4f4e41e93c3b","modified":1495437159075},{"_id":"public/scss/prontera.scss","hash":"170fe21f312fdf50b34100b447774ae38127d329","modified":1495437159075},{"_id":"public/css/prontera.css","hash":"8871a56398cb7c305570b495a77f2ae76a61d6ec","modified":1495437159080},{"_id":"public/script/libs/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1495437159080}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-05-20T07:03:18.000Z","_content":"\n融点Sonic，80后\n\n关于工作\n---\n\n98年接触PC，同年接触PC游戏：星际争霸，雷神之锤，CS\n大学专业是 CAD/CAM\n毕业后在广州一家视频网站工作八年 UI设计 前端开发\n现就职于Tencent互娱 UI开发\n\n社交媒体\n---\n\nQQ: 173456\nWX: sonichuang88\nTwitter: @sonic0828\n微博: @融点Sonic","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-05-20 15:03:18\n---\n\n融点Sonic，80后\n\n关于工作\n---\n\n98年接触PC，同年接触PC游戏：星际争霸，雷神之锤，CS\n大学专业是 CAD/CAM\n毕业后在广州一家视频网站工作八年 UI设计 前端开发\n现就职于Tencent互娱 UI开发\n\n社交媒体\n---\n\nQQ: 173456\nWX: sonichuang88\nTwitter: @sonic0828\n微博: @融点Sonic","updated":"2017-05-20T07:15:38.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj2zso8f20001idst6qshbaor","content":"<p>融点Sonic，80后</p>\n<h2 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h2><p>98年接触PC，同年接触PC游戏：星际争霸，雷神之锤，CS<br>大学专业是 CAD/CAM<br>毕业后在广州一家视频网站工作八年 UI设计 前端开发<br>现就职于Tencent互娱 UI开发</p>\n<h2 id=\"社交媒体\"><a href=\"#社交媒体\" class=\"headerlink\" title=\"社交媒体\"></a>社交媒体</h2><p>QQ: 173456<br>WX: sonichuang88<br>Twitter: @sonic0828<br>微博: @融点Sonic</p>\n","site":{"data":{}},"excerpt":"","more":"<p>融点Sonic，80后</p>\n<h2 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h2><p>98年接触PC，同年接触PC游戏：星际争霸，雷神之锤，CS<br>大学专业是 CAD/CAM<br>毕业后在广州一家视频网站工作八年 UI设计 前端开发<br>现就职于Tencent互娱 UI开发</p>\n<h2 id=\"社交媒体\"><a href=\"#社交媒体\" class=\"headerlink\" title=\"社交媒体\"></a>社交媒体</h2><p>QQ: 173456<br>WX: sonichuang88<br>Twitter: @sonic0828<br>微博: @融点Sonic</p>\n"}],"Post":[{"title":"iamsonic博客复活","date":"2017-05-20T08:45:23.000Z","_content":"Sonic Blog Come back!\n---\n博客主机到期，域名到期一直没有鸟。\n刚好去年在工作中研究了Hexo搭建静态博客，机缘巧合又发现了好的博客主题[hexo-theme-prontera](https://github.com/AngryPowman/hexo-theme-prontera)。那就换吧，之前文章不多，全部转回MD格式，顺便把域名也从iamsonic.info 换成 iamsonic.net.\n","source":"_posts/new-blog.md","raw":"---\ntitle: iamsonic博客复活\ndate: 2017-05-20 16:45:23\ntags:\n---\nSonic Blog Come back!\n---\n博客主机到期，域名到期一直没有鸟。\n刚好去年在工作中研究了Hexo搭建静态博客，机缘巧合又发现了好的博客主题[hexo-theme-prontera](https://github.com/AngryPowman/hexo-theme-prontera)。那就换吧，之前文章不多，全部转回MD格式，顺便把域名也从iamsonic.info 换成 iamsonic.net.\n","slug":"new-blog","published":1,"updated":"2017-05-22T07:12:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zso8er0000idstsdk9c7ae","content":"<h2 id=\"Sonic-Blog-Come-back\"><a href=\"#Sonic-Blog-Come-back\" class=\"headerlink\" title=\"Sonic Blog Come back!\"></a>Sonic Blog Come back!</h2><p>博客主机到期，域名到期一直没有鸟。<br>刚好去年在工作中研究了Hexo搭建静态博客，机缘巧合又发现了好的博客主题<a href=\"https://github.com/AngryPowman/hexo-theme-prontera\" target=\"_blank\" rel=\"external\">hexo-theme-prontera</a>。那就换吧，之前文章不多，全部转回MD格式，顺便把域名也从iamsonic.info 换成 iamsonic.net.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Sonic-Blog-Come-back\"><a href=\"#Sonic-Blog-Come-back\" class=\"headerlink\" title=\"Sonic Blog Come back!\"></a>Sonic Blog Come back!</h2><p>博客主机到期，域名到期一直没有鸟。<br>刚好去年在工作中研究了Hexo搭建静态博客，机缘巧合又发现了好的博客主题<a href=\"https://github.com/AngryPowman/hexo-theme-prontera\" target=\"_blank\" rel=\"external\">hexo-theme-prontera</a>。那就换吧，之前文章不多，全部转回MD格式，顺便把域名也从iamsonic.info 换成 iamsonic.net.</p>\n"},{"title":"new-gulp4","date":"2016-03-10T06:25:11.000Z","_content":"![](http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/gulp4.0-2x.png)\ngulp4.0开发1年多了，但是一直没有做为最新的稳定版本对外发布，最近才得知，真是孤陋寡闻一回。初探了一下，发现任务系统的变化蛮大，而且不再兼容3.x 及之前版本的任务系统。个人感受最深的是增加了 `gulp.series()` 和 `gulp.parallel()` 方法用于组合任务，多个任务执行时，**可控制任务是异步（并行）或同步（串行），甚至是部分异步，部分同步。**\n\n##全新的 gulp.task()\n从 3.x 升级到 4.x 主要做的就是修改任务定义，以前的任务是这么写的：\n![](http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code1.png)\n\n这样的任务写法在 Gulp 4.0 下要进行修改，要改成这样：\n![](http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code2.png)\n\n对比一下代码，这里有两点要强调说明一下：\n\n- 为什么多了个`return`，是因为目前的任务组合可同步，也可异步，所以整个任务定义函数要做为一个返回值来设定，[详细请看文档](https://github.com/gulpjs/gulp/blob/4.0/docs/API.md#async-support \"详细请看文档\")\n- `gulp.series()`里的任务是同步执行的，`gulp.parallel()`里的任务是异步执行的\n\n>**所以之前3.x的`gulpfile.js` 切换到4.0版本是要修改一下的，否则执行时会报错。**\n\n新的gulp.task 返回接受两种新的方式  `Return a child process`     `Return a RxJS observable`  这非常方便插件开发者进行 gulp插件定制。\n**Return a child process**\n``` js\ngulp.task('clean', function() {\n  return spawn('rm', ['-rf', path.join(__dirname, 'build')]);\n});\n```\n**Return a RxJS observable**\n``` js\nvar Observable = require('rx').Observable;\n\ngulp.task('sometask', function() {\n  return Observable.return(42);\n});\n```\n\n\n##gulp同步执行任务\n4.0之前 gulpr任务的执行都是异步的，但总有些场景是需要并行的\n```javascript\ngulp.task(\"build\", [\"clean\", \"js-min\", \"img-min\", \"css-min\", \"html\", \"zip\"]);\n```\n\n``` bash\n[10:22:54] Starting 'clean'...\n[10:22:54] Starting 'js-min'...\n[10:22:54] Starting 'img-min'...\n[10:22:54] Starting 'css-min'...\n[10:22:54] Starting 'html'...\n[10:22:54] Starting 'zip'...\n[10:22:54] Finished 'css-min' after 88 ms\n[10:22:54] Finished 'html' after 86 ms\n[10:22:54] Finished 'clean' after 255 ms\n[10:22:54] Finished 'zip' after 549 ms\n[10:22:55] Finished 'js-min' after 1.5 s\n[10:22:56] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)\n[10:22:56] Finished 'img-min' after 2.46 s\n[10:22:56] Starting 'build'...\n[10:22:56] Finished 'build' after 14 μs\n```\n>ToT!!!这样的任务执行完全错乱了，执行zip压缩时，我前面的js压缩，图片压缩等文件还没完整。这个压缩包生成后文件不完整呀！我想要的是：圆括号里面串行，中括号里面并行。如下：\n\n``` js\n(\"clean\", [\"js-min\",\"img-min\", \"css-min\", \"html\"], \"zip\")\n```\n**有什么办法可以解决？**\n\n- 标注依赖，但有时要处理多个依赖，依赖与依赖之间的依赖（麻烦，不推荐）\n- 使用插件[gulp-sequence](https://github.com/teambition/gulp-sequence \"gulp-sequence\") （不想升4.0 但有同步执行的需求时可用）\n- 使用gulp4.0 的 `gulp.series()`（超好用，推荐）\n\n使用gulp4.0的新API，我们可以把任务改成如下\n``` js\ngulp.task(\"build\", gulp.series(\"clean\",  gulp.parallel(\"js-min\",\"img-min\", \"css-min\", \"html\"), \"zip\"));\n```\n>`gulp.series()`里的任务是同步执行的，`gulp.parallel()`里的任务是异步执行的。\n\n再执行一次gulp build看看效果\n``` bash\n[15:36:53] Starting 'build'...\n[15:36:53] Starting 'clean'...\n[15:36:54] Finished 'clean' after 24 ms\n[15:36:55] Starting 'parallel'...\n[15:36:55] Starting 'js-min'...\n[15:36:55] Starting 'img-min'...\n[15:36:55] Starting 'css-min'...\n[15:36:55] Starting 'html'...\n[15:36:55] Finished 'js-min' after 88 s\n[15:36:55] Finished 'css-min' after 67 ms\n[15:36:55] Finished 'html' after 67 ms\n[15:36:57] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)\n[15:36:57] Finished 'img-min' after 2.25 s\n[15:36:57] Finished 'parallel' after 2.25 s\n[15:36:57] Starting 'zip'...\n[15:36:57] Finished 'zip' after 63 ms\n[15:36:57] Finished 'build' after 3.62 s\n```\n太棒了，这才是我 想要的！\n\n\n##gulp 4.0安装办法\n\n####如果之前安装过gulp 4.0前的版本，需把原来的旧版本卸载掉，执行下面代码，没装过则跳过此步骤\n``` shell\n# 卸载全局的 gulp\n$ npm uninstall 'gulp-cli' -g\n$ npm uninstall 'gulp' -g\n# 到项目目录里卸载本地的 gulp\n$ npm uninstall 'gulp' --save-dev\n```\n####开始全新安装gulp 4.0\n``` shell\n# 安装全局的 gulp 4.0\n$ npm install 'gulpjs/gulp-cli' -g\n$ npm install 'gulpjs/gulp#4.0' -g\n# 安装本地的 gulp 4.0\n$ npm install 'gulpjs/gulp#4.0' --save-dev\n```\n\n\n##变新日志\n\n我们来瞄一瞄4.0新版有什么不同（[CHANGELOG.md](https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md \"CHANGELOG.md\")）：\n\n###任务系统变化（基于 bach，替换掉了原先基于 orchestrator 的任务系统）\n\n- 移除 `gulp.reset`\n- `gulp.task` 不再支持三个参数的用法\n- `gulp.task` 用字符串注册的任务必须是直接在命令行中调用的任务\n- `gulp.task` 可以接受单参数语法，这个参数必须是一个命名函数，函数名会被作为任务名\n- 添加了 `gulp.series` 和 `gulp.parallel` 方法用于组合任务\n- 添加了 `gulp.tree` 方法用于获取任务树，传入 `{ deep: true }` 参数可以得到一个 `archy` 兼容的节点列表\n- 添加了 `gulp.registry` 方法以定制注册表。\n\n###命令行变化\n\n- 将命令行分离出来成为一个独立模块，以便节约带宽/空间。用 `npm install gulp -g` 或 `npm install gulp-cli -g` 都可以安装命令行，只是 `gulp-cli` 不包含模块代码所以比较小\n- 命令行添加了 `--tasks-json` 参数，可以导出整个任务树以供他用\n- 命令行添加了 `—verify` 参数用以检查 `package.json` 中是否包含黑名单插件（违背准则而被禁入官方插件列表的可怜娃们）。\n\n###文件系统变化\n\n- 添加了 `gulp.symlink` 方法，功能和 `gulp.dest` 一致，不过是以软链接的方式\n- `gulp.dest` 和 `gulp.symlink` 方法添加了 `dirMode` 参数允许对目标目录更好地控制\n- `gulp.src` 接收的文件匹配字符串会顺序解释，所以你可以写成这样 `gulp.src(['*.js', '!b*.js', 'bad.js’])`（排除所有以 b 开头的 JS 文件但是除了 bad.js）\n- `gulp.src` 性能进行极大的改进\n- `gulp.src` 方法添加了 `since` 选项，筛选在特定时间点之后修改过的文件（用于增量编译）\n- `gulp.dest` 方法添加了 `overwrite` 选项 允许你启用或禁用现有的文件覆盖\n\n\n\n##参考\nhttps://segmentfault.com/a/1190000002528547\nhttp://www.gulpjs.com.cn/docs/recipes/running-tasks-in-series/\nhttp://zhangruojun.com/gulpshun-xu-zhi-xing-ren-wu/","source":"_posts/new-gulp4.md","raw":"---\ntitle: new-gulp4\ndate: 2016-03-10 14:25:11\ntags:\n---\n![](http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/gulp4.0-2x.png)\ngulp4.0开发1年多了，但是一直没有做为最新的稳定版本对外发布，最近才得知，真是孤陋寡闻一回。初探了一下，发现任务系统的变化蛮大，而且不再兼容3.x 及之前版本的任务系统。个人感受最深的是增加了 `gulp.series()` 和 `gulp.parallel()` 方法用于组合任务，多个任务执行时，**可控制任务是异步（并行）或同步（串行），甚至是部分异步，部分同步。**\n\n##全新的 gulp.task()\n从 3.x 升级到 4.x 主要做的就是修改任务定义，以前的任务是这么写的：\n![](http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code1.png)\n\n这样的任务写法在 Gulp 4.0 下要进行修改，要改成这样：\n![](http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code2.png)\n\n对比一下代码，这里有两点要强调说明一下：\n\n- 为什么多了个`return`，是因为目前的任务组合可同步，也可异步，所以整个任务定义函数要做为一个返回值来设定，[详细请看文档](https://github.com/gulpjs/gulp/blob/4.0/docs/API.md#async-support \"详细请看文档\")\n- `gulp.series()`里的任务是同步执行的，`gulp.parallel()`里的任务是异步执行的\n\n>**所以之前3.x的`gulpfile.js` 切换到4.0版本是要修改一下的，否则执行时会报错。**\n\n新的gulp.task 返回接受两种新的方式  `Return a child process`     `Return a RxJS observable`  这非常方便插件开发者进行 gulp插件定制。\n**Return a child process**\n``` js\ngulp.task('clean', function() {\n  return spawn('rm', ['-rf', path.join(__dirname, 'build')]);\n});\n```\n**Return a RxJS observable**\n``` js\nvar Observable = require('rx').Observable;\n\ngulp.task('sometask', function() {\n  return Observable.return(42);\n});\n```\n\n\n##gulp同步执行任务\n4.0之前 gulpr任务的执行都是异步的，但总有些场景是需要并行的\n```javascript\ngulp.task(\"build\", [\"clean\", \"js-min\", \"img-min\", \"css-min\", \"html\", \"zip\"]);\n```\n\n``` bash\n[10:22:54] Starting 'clean'...\n[10:22:54] Starting 'js-min'...\n[10:22:54] Starting 'img-min'...\n[10:22:54] Starting 'css-min'...\n[10:22:54] Starting 'html'...\n[10:22:54] Starting 'zip'...\n[10:22:54] Finished 'css-min' after 88 ms\n[10:22:54] Finished 'html' after 86 ms\n[10:22:54] Finished 'clean' after 255 ms\n[10:22:54] Finished 'zip' after 549 ms\n[10:22:55] Finished 'js-min' after 1.5 s\n[10:22:56] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)\n[10:22:56] Finished 'img-min' after 2.46 s\n[10:22:56] Starting 'build'...\n[10:22:56] Finished 'build' after 14 μs\n```\n>ToT!!!这样的任务执行完全错乱了，执行zip压缩时，我前面的js压缩，图片压缩等文件还没完整。这个压缩包生成后文件不完整呀！我想要的是：圆括号里面串行，中括号里面并行。如下：\n\n``` js\n(\"clean\", [\"js-min\",\"img-min\", \"css-min\", \"html\"], \"zip\")\n```\n**有什么办法可以解决？**\n\n- 标注依赖，但有时要处理多个依赖，依赖与依赖之间的依赖（麻烦，不推荐）\n- 使用插件[gulp-sequence](https://github.com/teambition/gulp-sequence \"gulp-sequence\") （不想升4.0 但有同步执行的需求时可用）\n- 使用gulp4.0 的 `gulp.series()`（超好用，推荐）\n\n使用gulp4.0的新API，我们可以把任务改成如下\n``` js\ngulp.task(\"build\", gulp.series(\"clean\",  gulp.parallel(\"js-min\",\"img-min\", \"css-min\", \"html\"), \"zip\"));\n```\n>`gulp.series()`里的任务是同步执行的，`gulp.parallel()`里的任务是异步执行的。\n\n再执行一次gulp build看看效果\n``` bash\n[15:36:53] Starting 'build'...\n[15:36:53] Starting 'clean'...\n[15:36:54] Finished 'clean' after 24 ms\n[15:36:55] Starting 'parallel'...\n[15:36:55] Starting 'js-min'...\n[15:36:55] Starting 'img-min'...\n[15:36:55] Starting 'css-min'...\n[15:36:55] Starting 'html'...\n[15:36:55] Finished 'js-min' after 88 s\n[15:36:55] Finished 'css-min' after 67 ms\n[15:36:55] Finished 'html' after 67 ms\n[15:36:57] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)\n[15:36:57] Finished 'img-min' after 2.25 s\n[15:36:57] Finished 'parallel' after 2.25 s\n[15:36:57] Starting 'zip'...\n[15:36:57] Finished 'zip' after 63 ms\n[15:36:57] Finished 'build' after 3.62 s\n```\n太棒了，这才是我 想要的！\n\n\n##gulp 4.0安装办法\n\n####如果之前安装过gulp 4.0前的版本，需把原来的旧版本卸载掉，执行下面代码，没装过则跳过此步骤\n``` shell\n# 卸载全局的 gulp\n$ npm uninstall 'gulp-cli' -g\n$ npm uninstall 'gulp' -g\n# 到项目目录里卸载本地的 gulp\n$ npm uninstall 'gulp' --save-dev\n```\n####开始全新安装gulp 4.0\n``` shell\n# 安装全局的 gulp 4.0\n$ npm install 'gulpjs/gulp-cli' -g\n$ npm install 'gulpjs/gulp#4.0' -g\n# 安装本地的 gulp 4.0\n$ npm install 'gulpjs/gulp#4.0' --save-dev\n```\n\n\n##变新日志\n\n我们来瞄一瞄4.0新版有什么不同（[CHANGELOG.md](https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md \"CHANGELOG.md\")）：\n\n###任务系统变化（基于 bach，替换掉了原先基于 orchestrator 的任务系统）\n\n- 移除 `gulp.reset`\n- `gulp.task` 不再支持三个参数的用法\n- `gulp.task` 用字符串注册的任务必须是直接在命令行中调用的任务\n- `gulp.task` 可以接受单参数语法，这个参数必须是一个命名函数，函数名会被作为任务名\n- 添加了 `gulp.series` 和 `gulp.parallel` 方法用于组合任务\n- 添加了 `gulp.tree` 方法用于获取任务树，传入 `{ deep: true }` 参数可以得到一个 `archy` 兼容的节点列表\n- 添加了 `gulp.registry` 方法以定制注册表。\n\n###命令行变化\n\n- 将命令行分离出来成为一个独立模块，以便节约带宽/空间。用 `npm install gulp -g` 或 `npm install gulp-cli -g` 都可以安装命令行，只是 `gulp-cli` 不包含模块代码所以比较小\n- 命令行添加了 `--tasks-json` 参数，可以导出整个任务树以供他用\n- 命令行添加了 `—verify` 参数用以检查 `package.json` 中是否包含黑名单插件（违背准则而被禁入官方插件列表的可怜娃们）。\n\n###文件系统变化\n\n- 添加了 `gulp.symlink` 方法，功能和 `gulp.dest` 一致，不过是以软链接的方式\n- `gulp.dest` 和 `gulp.symlink` 方法添加了 `dirMode` 参数允许对目标目录更好地控制\n- `gulp.src` 接收的文件匹配字符串会顺序解释，所以你可以写成这样 `gulp.src(['*.js', '!b*.js', 'bad.js’])`（排除所有以 b 开头的 JS 文件但是除了 bad.js）\n- `gulp.src` 性能进行极大的改进\n- `gulp.src` 方法添加了 `since` 选项，筛选在特定时间点之后修改过的文件（用于增量编译）\n- `gulp.dest` 方法添加了 `overwrite` 选项 允许你启用或禁用现有的文件覆盖\n\n\n\n##参考\nhttps://segmentfault.com/a/1190000002528547\nhttp://www.gulpjs.com.cn/docs/recipes/running-tasks-in-series/\nhttp://zhangruojun.com/gulpshun-xu-zhi-xing-ren-wu/","slug":"new-gulp4","published":1,"updated":"2017-05-22T07:12:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zso8f50002idstvjao01e8","content":"<p><img src=\"http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/gulp4.0-2x.png\" alt=\"\"><br>gulp4.0开发1年多了，但是一直没有做为最新的稳定版本对外发布，最近才得知，真是孤陋寡闻一回。初探了一下，发现任务系统的变化蛮大，而且不再兼容3.x 及之前版本的任务系统。个人感受最深的是增加了 <code>gulp.series()</code> 和 <code>gulp.parallel()</code> 方法用于组合任务，多个任务执行时，<strong>可控制任务是异步（并行）或同步（串行），甚至是部分异步，部分同步。</strong></p>\n<p>##全新的 gulp.task()<br>从 3.x 升级到 4.x 主要做的就是修改任务定义，以前的任务是这么写的：<br><img src=\"http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code1.png\" alt=\"\"></p>\n<p>这样的任务写法在 Gulp 4.0 下要进行修改，要改成这样：<br><img src=\"http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code2.png\" alt=\"\"></p>\n<p>对比一下代码，这里有两点要强调说明一下：</p>\n<ul>\n<li>为什么多了个<code>return</code>，是因为目前的任务组合可同步，也可异步，所以整个任务定义函数要做为一个返回值来设定，<a href=\"https://github.com/gulpjs/gulp/blob/4.0/docs/API.md#async-support\" title=\"详细请看文档\" target=\"_blank\" rel=\"external\">详细请看文档</a></li>\n<li><code>gulp.series()</code>里的任务是同步执行的，<code>gulp.parallel()</code>里的任务是异步执行的</li>\n</ul>\n<blockquote>\n<p><strong>所以之前3.x的<code>gulpfile.js</code> 切换到4.0版本是要修改一下的，否则执行时会报错。</strong></p>\n</blockquote>\n<p>新的gulp.task 返回接受两种新的方式  <code>Return a child process</code>     <code>Return a RxJS observable</code>  这非常方便插件开发者进行 gulp插件定制。<br><strong>Return a child process</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> spawn(<span class=\"string\">'rm'</span>, [<span class=\"string\">'-rf'</span>, path.join(__dirname, <span class=\"string\">'build'</span>)]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>Return a RxJS observable</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Observable = <span class=\"built_in\">require</span>(<span class=\"string\">'rx'</span>).Observable;</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'sometask'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> Observable.return(<span class=\"number\">42</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>##gulp同步执行任务<br>4.0之前 gulpr任务的执行都是异步的，但总有些场景是需要并行的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">\"build\"</span>, [<span class=\"string\">\"clean\"</span>, <span class=\"string\">\"js-min\"</span>, <span class=\"string\">\"img-min\"</span>, <span class=\"string\">\"css-min\"</span>, <span class=\"string\">\"html\"</span>, <span class=\"string\">\"zip\"</span>]);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[10:22:54] Starting <span class=\"string\">'clean'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'js-min'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'img-min'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'css-min'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'html'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'zip'</span>...</div><div class=\"line\">[10:22:54] Finished <span class=\"string\">'css-min'</span> after 88 ms</div><div class=\"line\">[10:22:54] Finished <span class=\"string\">'html'</span> after 86 ms</div><div class=\"line\">[10:22:54] Finished <span class=\"string\">'clean'</span> after 255 ms</div><div class=\"line\">[10:22:54] Finished <span class=\"string\">'zip'</span> after 549 ms</div><div class=\"line\">[10:22:55] Finished <span class=\"string\">'js-min'</span> after 1.5 s</div><div class=\"line\">[10:22:56] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)</div><div class=\"line\">[10:22:56] Finished <span class=\"string\">'img-min'</span> after 2.46 s</div><div class=\"line\">[10:22:56] Starting <span class=\"string\">'build'</span>...</div><div class=\"line\">[10:22:56] Finished <span class=\"string\">'build'</span> after 14 μs</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ToT!!!这样的任务执行完全错乱了，执行zip压缩时，我前面的js压缩，图片压缩等文件还没完整。这个压缩包生成后文件不完整呀！我想要的是：圆括号里面串行，中括号里面并行。如下：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"string\">\"clean\"</span>, [<span class=\"string\">\"js-min\"</span>,<span class=\"string\">\"img-min\"</span>, <span class=\"string\">\"css-min\"</span>, <span class=\"string\">\"html\"</span>], <span class=\"string\">\"zip\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>有什么办法可以解决？</strong></p>\n<ul>\n<li>标注依赖，但有时要处理多个依赖，依赖与依赖之间的依赖（麻烦，不推荐）</li>\n<li>使用插件<a href=\"https://github.com/teambition/gulp-sequence\" title=\"gulp-sequence\" target=\"_blank\" rel=\"external\">gulp-sequence</a> （不想升4.0 但有同步执行的需求时可用）</li>\n<li>使用gulp4.0 的 <code>gulp.series()</code>（超好用，推荐）</li>\n</ul>\n<p>使用gulp4.0的新API，我们可以把任务改成如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">\"build\"</span>, gulp.series(<span class=\"string\">\"clean\"</span>,  gulp.parallel(<span class=\"string\">\"js-min\"</span>,<span class=\"string\">\"img-min\"</span>, <span class=\"string\">\"css-min\"</span>, <span class=\"string\">\"html\"</span>), <span class=\"string\">\"zip\"</span>));</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>gulp.series()</code>里的任务是同步执行的，<code>gulp.parallel()</code>里的任务是异步执行的。</p>\n</blockquote>\n<p>再执行一次gulp build看看效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[15:36:53] Starting <span class=\"string\">'build'</span>...</div><div class=\"line\">[15:36:53] Starting <span class=\"string\">'clean'</span>...</div><div class=\"line\">[15:36:54] Finished <span class=\"string\">'clean'</span> after 24 ms</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'parallel'</span>...</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'js-min'</span>...</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'img-min'</span>...</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'css-min'</span>...</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'html'</span>...</div><div class=\"line\">[15:36:55] Finished <span class=\"string\">'js-min'</span> after 88 s</div><div class=\"line\">[15:36:55] Finished <span class=\"string\">'css-min'</span> after 67 ms</div><div class=\"line\">[15:36:55] Finished <span class=\"string\">'html'</span> after 67 ms</div><div class=\"line\">[15:36:57] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)</div><div class=\"line\">[15:36:57] Finished <span class=\"string\">'img-min'</span> after 2.25 s</div><div class=\"line\">[15:36:57] Finished <span class=\"string\">'parallel'</span> after 2.25 s</div><div class=\"line\">[15:36:57] Starting <span class=\"string\">'zip'</span>...</div><div class=\"line\">[15:36:57] Finished <span class=\"string\">'zip'</span> after 63 ms</div><div class=\"line\">[15:36:57] Finished <span class=\"string\">'build'</span> after 3.62 s</div></pre></td></tr></table></figure></p>\n<p>太棒了，这才是我 想要的！</p>\n<p>##gulp 4.0安装办法</p>\n<p>####如果之前安装过gulp 4.0前的版本，需把原来的旧版本卸载掉，执行下面代码，没装过则跳过此步骤<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 卸载全局的 gulp</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall <span class=\"string\">'gulp-cli'</span> -g</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall <span class=\"string\">'gulp'</span> -g</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 到项目目录里卸载本地的 gulp</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall <span class=\"string\">'gulp'</span> --save-dev</span></div></pre></td></tr></table></figure></p>\n<p>####开始全新安装gulp 4.0<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装全局的 gulp 4.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install <span class=\"string\">'gulpjs/gulp-cli'</span> -g</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install <span class=\"string\">'gulpjs/gulp#4.0'</span> -g</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装本地的 gulp 4.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install <span class=\"string\">'gulpjs/gulp#4.0'</span> --save-dev</span></div></pre></td></tr></table></figure></p>\n<p>##变新日志</p>\n<p>我们来瞄一瞄4.0新版有什么不同（<a href=\"https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md\" title=\"CHANGELOG.md\" target=\"_blank\" rel=\"external\">CHANGELOG.md</a>）：</p>\n<p>###任务系统变化（基于 bach，替换掉了原先基于 orchestrator 的任务系统）</p>\n<ul>\n<li>移除 <code>gulp.reset</code></li>\n<li><code>gulp.task</code> 不再支持三个参数的用法</li>\n<li><code>gulp.task</code> 用字符串注册的任务必须是直接在命令行中调用的任务</li>\n<li><code>gulp.task</code> 可以接受单参数语法，这个参数必须是一个命名函数，函数名会被作为任务名</li>\n<li>添加了 <code>gulp.series</code> 和 <code>gulp.parallel</code> 方法用于组合任务</li>\n<li>添加了 <code>gulp.tree</code> 方法用于获取任务树，传入 <code>{ deep: true }</code> 参数可以得到一个 <code>archy</code> 兼容的节点列表</li>\n<li>添加了 <code>gulp.registry</code> 方法以定制注册表。</li>\n</ul>\n<p>###命令行变化</p>\n<ul>\n<li>将命令行分离出来成为一个独立模块，以便节约带宽/空间。用 <code>npm install gulp -g</code> 或 <code>npm install gulp-cli -g</code> 都可以安装命令行，只是 <code>gulp-cli</code> 不包含模块代码所以比较小</li>\n<li>命令行添加了 <code>--tasks-json</code> 参数，可以导出整个任务树以供他用</li>\n<li>命令行添加了 <code>—verify</code> 参数用以检查 <code>package.json</code> 中是否包含黑名单插件（违背准则而被禁入官方插件列表的可怜娃们）。</li>\n</ul>\n<p>###文件系统变化</p>\n<ul>\n<li>添加了 <code>gulp.symlink</code> 方法，功能和 <code>gulp.dest</code> 一致，不过是以软链接的方式</li>\n<li><code>gulp.dest</code> 和 <code>gulp.symlink</code> 方法添加了 <code>dirMode</code> 参数允许对目标目录更好地控制</li>\n<li><code>gulp.src</code> 接收的文件匹配字符串会顺序解释，所以你可以写成这样 <code>gulp.src([&#39;*.js&#39;, &#39;!b*.js&#39;, &#39;bad.js’])</code>（排除所有以 b 开头的 JS 文件但是除了 bad.js）</li>\n<li><code>gulp.src</code> 性能进行极大的改进</li>\n<li><code>gulp.src</code> 方法添加了 <code>since</code> 选项，筛选在特定时间点之后修改过的文件（用于增量编译）</li>\n<li><code>gulp.dest</code> 方法添加了 <code>overwrite</code> 选项 允许你启用或禁用现有的文件覆盖</li>\n</ul>\n<p>##参考<br><a href=\"https://segmentfault.com/a/1190000002528547\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000002528547</a><br><a href=\"http://www.gulpjs.com.cn/docs/recipes/running-tasks-in-series/\" target=\"_blank\" rel=\"external\">http://www.gulpjs.com.cn/docs/recipes/running-tasks-in-series/</a><br><a href=\"http://zhangruojun.com/gulpshun-xu-zhi-xing-ren-wu/\" target=\"_blank\" rel=\"external\">http://zhangruojun.com/gulpshun-xu-zhi-xing-ren-wu/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/gulp4.0-2x.png\" alt=\"\"><br>gulp4.0开发1年多了，但是一直没有做为最新的稳定版本对外发布，最近才得知，真是孤陋寡闻一回。初探了一下，发现任务系统的变化蛮大，而且不再兼容3.x 及之前版本的任务系统。个人感受最深的是增加了 <code>gulp.series()</code> 和 <code>gulp.parallel()</code> 方法用于组合任务，多个任务执行时，<strong>可控制任务是异步（并行）或同步（串行），甚至是部分异步，部分同步。</strong></p>\n<p>##全新的 gulp.task()<br>从 3.x 升级到 4.x 主要做的就是修改任务定义，以前的任务是这么写的：<br><img src=\"http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code1.png\" alt=\"\"></p>\n<p>这样的任务写法在 Gulp 4.0 下要进行修改，要改成这样：<br><img src=\"http://iamsonic-1253772978.cosgz.myqcloud.com/blog/glup4.0/code2.png\" alt=\"\"></p>\n<p>对比一下代码，这里有两点要强调说明一下：</p>\n<ul>\n<li>为什么多了个<code>return</code>，是因为目前的任务组合可同步，也可异步，所以整个任务定义函数要做为一个返回值来设定，<a href=\"https://github.com/gulpjs/gulp/blob/4.0/docs/API.md#async-support\" title=\"详细请看文档\" target=\"_blank\" rel=\"external\">详细请看文档</a></li>\n<li><code>gulp.series()</code>里的任务是同步执行的，<code>gulp.parallel()</code>里的任务是异步执行的</li>\n</ul>\n<blockquote>\n<p><strong>所以之前3.x的<code>gulpfile.js</code> 切换到4.0版本是要修改一下的，否则执行时会报错。</strong></p>\n</blockquote>\n<p>新的gulp.task 返回接受两种新的方式  <code>Return a child process</code>     <code>Return a RxJS observable</code>  这非常方便插件开发者进行 gulp插件定制。<br><strong>Return a child process</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> spawn(<span class=\"string\">'rm'</span>, [<span class=\"string\">'-rf'</span>, path.join(__dirname, <span class=\"string\">'build'</span>)]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>Return a RxJS observable</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Observable = <span class=\"built_in\">require</span>(<span class=\"string\">'rx'</span>).Observable;</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'sometask'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> Observable.return(<span class=\"number\">42</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>##gulp同步执行任务<br>4.0之前 gulpr任务的执行都是异步的，但总有些场景是需要并行的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">\"build\"</span>, [<span class=\"string\">\"clean\"</span>, <span class=\"string\">\"js-min\"</span>, <span class=\"string\">\"img-min\"</span>, <span class=\"string\">\"css-min\"</span>, <span class=\"string\">\"html\"</span>, <span class=\"string\">\"zip\"</span>]);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[10:22:54] Starting <span class=\"string\">'clean'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'js-min'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'img-min'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'css-min'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'html'</span>...</div><div class=\"line\">[10:22:54] Starting <span class=\"string\">'zip'</span>...</div><div class=\"line\">[10:22:54] Finished <span class=\"string\">'css-min'</span> after 88 ms</div><div class=\"line\">[10:22:54] Finished <span class=\"string\">'html'</span> after 86 ms</div><div class=\"line\">[10:22:54] Finished <span class=\"string\">'clean'</span> after 255 ms</div><div class=\"line\">[10:22:54] Finished <span class=\"string\">'zip'</span> after 549 ms</div><div class=\"line\">[10:22:55] Finished <span class=\"string\">'js-min'</span> after 1.5 s</div><div class=\"line\">[10:22:56] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)</div><div class=\"line\">[10:22:56] Finished <span class=\"string\">'img-min'</span> after 2.46 s</div><div class=\"line\">[10:22:56] Starting <span class=\"string\">'build'</span>...</div><div class=\"line\">[10:22:56] Finished <span class=\"string\">'build'</span> after 14 μs</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ToT!!!这样的任务执行完全错乱了，执行zip压缩时，我前面的js压缩，图片压缩等文件还没完整。这个压缩包生成后文件不完整呀！我想要的是：圆括号里面串行，中括号里面并行。如下：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"string\">\"clean\"</span>, [<span class=\"string\">\"js-min\"</span>,<span class=\"string\">\"img-min\"</span>, <span class=\"string\">\"css-min\"</span>, <span class=\"string\">\"html\"</span>], <span class=\"string\">\"zip\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>有什么办法可以解决？</strong></p>\n<ul>\n<li>标注依赖，但有时要处理多个依赖，依赖与依赖之间的依赖（麻烦，不推荐）</li>\n<li>使用插件<a href=\"https://github.com/teambition/gulp-sequence\" title=\"gulp-sequence\" target=\"_blank\" rel=\"external\">gulp-sequence</a> （不想升4.0 但有同步执行的需求时可用）</li>\n<li>使用gulp4.0 的 <code>gulp.series()</code>（超好用，推荐）</li>\n</ul>\n<p>使用gulp4.0的新API，我们可以把任务改成如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">\"build\"</span>, gulp.series(<span class=\"string\">\"clean\"</span>,  gulp.parallel(<span class=\"string\">\"js-min\"</span>,<span class=\"string\">\"img-min\"</span>, <span class=\"string\">\"css-min\"</span>, <span class=\"string\">\"html\"</span>), <span class=\"string\">\"zip\"</span>));</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>gulp.series()</code>里的任务是同步执行的，<code>gulp.parallel()</code>里的任务是异步执行的。</p>\n</blockquote>\n<p>再执行一次gulp build看看效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[15:36:53] Starting <span class=\"string\">'build'</span>...</div><div class=\"line\">[15:36:53] Starting <span class=\"string\">'clean'</span>...</div><div class=\"line\">[15:36:54] Finished <span class=\"string\">'clean'</span> after 24 ms</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'parallel'</span>...</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'js-min'</span>...</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'img-min'</span>...</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'css-min'</span>...</div><div class=\"line\">[15:36:55] Starting <span class=\"string\">'html'</span>...</div><div class=\"line\">[15:36:55] Finished <span class=\"string\">'js-min'</span> after 88 s</div><div class=\"line\">[15:36:55] Finished <span class=\"string\">'css-min'</span> after 67 ms</div><div class=\"line\">[15:36:55] Finished <span class=\"string\">'html'</span> after 67 ms</div><div class=\"line\">[15:36:57] gulp-imagemin: Minified 15 images (saved 337.01 kB - 30.8%)</div><div class=\"line\">[15:36:57] Finished <span class=\"string\">'img-min'</span> after 2.25 s</div><div class=\"line\">[15:36:57] Finished <span class=\"string\">'parallel'</span> after 2.25 s</div><div class=\"line\">[15:36:57] Starting <span class=\"string\">'zip'</span>...</div><div class=\"line\">[15:36:57] Finished <span class=\"string\">'zip'</span> after 63 ms</div><div class=\"line\">[15:36:57] Finished <span class=\"string\">'build'</span> after 3.62 s</div></pre></td></tr></table></figure></p>\n<p>太棒了，这才是我 想要的！</p>\n<p>##gulp 4.0安装办法</p>\n<p>####如果之前安装过gulp 4.0前的版本，需把原来的旧版本卸载掉，执行下面代码，没装过则跳过此步骤<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 卸载全局的 gulp</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall <span class=\"string\">'gulp-cli'</span> -g</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall <span class=\"string\">'gulp'</span> -g</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 到项目目录里卸载本地的 gulp</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall <span class=\"string\">'gulp'</span> --save-dev</span></div></pre></td></tr></table></figure></p>\n<p>####开始全新安装gulp 4.0<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装全局的 gulp 4.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install <span class=\"string\">'gulpjs/gulp-cli'</span> -g</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install <span class=\"string\">'gulpjs/gulp#4.0'</span> -g</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装本地的 gulp 4.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install <span class=\"string\">'gulpjs/gulp#4.0'</span> --save-dev</span></div></pre></td></tr></table></figure></p>\n<p>##变新日志</p>\n<p>我们来瞄一瞄4.0新版有什么不同（<a href=\"https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md\" title=\"CHANGELOG.md\" target=\"_blank\" rel=\"external\">CHANGELOG.md</a>）：</p>\n<p>###任务系统变化（基于 bach，替换掉了原先基于 orchestrator 的任务系统）</p>\n<ul>\n<li>移除 <code>gulp.reset</code></li>\n<li><code>gulp.task</code> 不再支持三个参数的用法</li>\n<li><code>gulp.task</code> 用字符串注册的任务必须是直接在命令行中调用的任务</li>\n<li><code>gulp.task</code> 可以接受单参数语法，这个参数必须是一个命名函数，函数名会被作为任务名</li>\n<li>添加了 <code>gulp.series</code> 和 <code>gulp.parallel</code> 方法用于组合任务</li>\n<li>添加了 <code>gulp.tree</code> 方法用于获取任务树，传入 <code>{ deep: true }</code> 参数可以得到一个 <code>archy</code> 兼容的节点列表</li>\n<li>添加了 <code>gulp.registry</code> 方法以定制注册表。</li>\n</ul>\n<p>###命令行变化</p>\n<ul>\n<li>将命令行分离出来成为一个独立模块，以便节约带宽/空间。用 <code>npm install gulp -g</code> 或 <code>npm install gulp-cli -g</code> 都可以安装命令行，只是 <code>gulp-cli</code> 不包含模块代码所以比较小</li>\n<li>命令行添加了 <code>--tasks-json</code> 参数，可以导出整个任务树以供他用</li>\n<li>命令行添加了 <code>—verify</code> 参数用以检查 <code>package.json</code> 中是否包含黑名单插件（违背准则而被禁入官方插件列表的可怜娃们）。</li>\n</ul>\n<p>###文件系统变化</p>\n<ul>\n<li>添加了 <code>gulp.symlink</code> 方法，功能和 <code>gulp.dest</code> 一致，不过是以软链接的方式</li>\n<li><code>gulp.dest</code> 和 <code>gulp.symlink</code> 方法添加了 <code>dirMode</code> 参数允许对目标目录更好地控制</li>\n<li><code>gulp.src</code> 接收的文件匹配字符串会顺序解释，所以你可以写成这样 <code>gulp.src([&#39;*.js&#39;, &#39;!b*.js&#39;, &#39;bad.js’])</code>（排除所有以 b 开头的 JS 文件但是除了 bad.js）</li>\n<li><code>gulp.src</code> 性能进行极大的改进</li>\n<li><code>gulp.src</code> 方法添加了 <code>since</code> 选项，筛选在特定时间点之后修改过的文件（用于增量编译）</li>\n<li><code>gulp.dest</code> 方法添加了 <code>overwrite</code> 选项 允许你启用或禁用现有的文件覆盖</li>\n</ul>\n<p>##参考<br><a href=\"https://segmentfault.com/a/1190000002528547\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000002528547</a><br><a href=\"http://www.gulpjs.com.cn/docs/recipes/running-tasks-in-series/\" target=\"_blank\" rel=\"external\">http://www.gulpjs.com.cn/docs/recipes/running-tasks-in-series/</a><br><a href=\"http://zhangruojun.com/gulpshun-xu-zhi-xing-ren-wu/\" target=\"_blank\" rel=\"external\">http://zhangruojun.com/gulpshun-xu-zhi-xing-ren-wu/</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}